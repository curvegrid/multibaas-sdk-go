/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the AzureWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureWallet{}

// AzureWallet An HSM Wallet returned when a new key is created
type AzureWallet struct {
	// The name of the key.
	KeyName string `json:"keyName"`
	// The version of the key.
	KeyVersion string `json:"keyVersion"`
	// An ethereum address.
	PublicAddress string `json:"publicAddress"`
}

// NewAzureWallet instantiates a new AzureWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureWallet(keyName string, keyVersion string, publicAddress string) *AzureWallet {
	this := AzureWallet{}
	this.KeyName = keyName
	this.KeyVersion = keyVersion
	this.PublicAddress = publicAddress
	return &this
}

// NewAzureWalletWithDefaults instantiates a new AzureWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureWalletWithDefaults() *AzureWallet {
	this := AzureWallet{}
	return &this
}

// GetKeyName returns the KeyName field value
func (o *AzureWallet) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *AzureWallet) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *AzureWallet) SetKeyName(v string) {
	o.KeyName = v
}

// GetKeyVersion returns the KeyVersion field value
func (o *AzureWallet) GetKeyVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyVersion
}

// GetKeyVersionOk returns a tuple with the KeyVersion field value
// and a boolean to check if the value has been set.
func (o *AzureWallet) GetKeyVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyVersion, true
}

// SetKeyVersion sets field value
func (o *AzureWallet) SetKeyVersion(v string) {
	o.KeyVersion = v
}

// GetPublicAddress returns the PublicAddress field value
func (o *AzureWallet) GetPublicAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicAddress
}

// GetPublicAddressOk returns a tuple with the PublicAddress field value
// and a boolean to check if the value has been set.
func (o *AzureWallet) GetPublicAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicAddress, true
}

// SetPublicAddress sets field value
func (o *AzureWallet) SetPublicAddress(v string) {
	o.PublicAddress = v
}

func (o AzureWallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keyName"] = o.KeyName
	toSerialize["keyVersion"] = o.KeyVersion
	toSerialize["publicAddress"] = o.PublicAddress
	return toSerialize, nil
}

type NullableAzureWallet struct {
	value *AzureWallet
	isSet bool
}

func (v NullableAzureWallet) Get() *AzureWallet {
	return v.value
}

func (v *NullableAzureWallet) Set(val *AzureWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureWallet(val *AzureWallet) *NullableAzureWallet {
	return &NullableAzureWallet{value: val, isSet: true}
}

func (v NullableAzureWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
