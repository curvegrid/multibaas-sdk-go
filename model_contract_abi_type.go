/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContractABIType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractABIType{}

// ContractABIType A contract function or event argument type.
type ContractABIType struct {
	Type          string            `json:"type"`
	Size          *int64            `json:"size,omitempty"`
	TupleElems    []ContractABIType `json:"tupleElems,omitempty"`
	TupleRawNames []string          `json:"tupleRawNames,omitempty"`
	Elem          *ContractABIType  `json:"elem,omitempty"`
}

type _ContractABIType ContractABIType

// NewContractABIType instantiates a new ContractABIType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractABIType(type_ string) *ContractABIType {
	this := ContractABIType{}
	this.Type = type_
	return &this
}

// NewContractABITypeWithDefaults instantiates a new ContractABIType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractABITypeWithDefaults() *ContractABIType {
	this := ContractABIType{}
	return &this
}

// GetType returns the Type field value
func (o *ContractABIType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContractABIType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContractABIType) SetType(v string) {
	o.Type = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ContractABIType) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIType) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ContractABIType) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ContractABIType) SetSize(v int64) {
	o.Size = &v
}

// GetTupleElems returns the TupleElems field value if set, zero value otherwise.
func (o *ContractABIType) GetTupleElems() []ContractABIType {
	if o == nil || IsNil(o.TupleElems) {
		var ret []ContractABIType
		return ret
	}
	return o.TupleElems
}

// GetTupleElemsOk returns a tuple with the TupleElems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIType) GetTupleElemsOk() ([]ContractABIType, bool) {
	if o == nil || IsNil(o.TupleElems) {
		return nil, false
	}
	return o.TupleElems, true
}

// HasTupleElems returns a boolean if a field has been set.
func (o *ContractABIType) HasTupleElems() bool {
	if o != nil && !IsNil(o.TupleElems) {
		return true
	}

	return false
}

// SetTupleElems gets a reference to the given []ContractABIType and assigns it to the TupleElems field.
func (o *ContractABIType) SetTupleElems(v []ContractABIType) {
	o.TupleElems = v
}

// GetTupleRawNames returns the TupleRawNames field value if set, zero value otherwise.
func (o *ContractABIType) GetTupleRawNames() []string {
	if o == nil || IsNil(o.TupleRawNames) {
		var ret []string
		return ret
	}
	return o.TupleRawNames
}

// GetTupleRawNamesOk returns a tuple with the TupleRawNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIType) GetTupleRawNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.TupleRawNames) {
		return nil, false
	}
	return o.TupleRawNames, true
}

// HasTupleRawNames returns a boolean if a field has been set.
func (o *ContractABIType) HasTupleRawNames() bool {
	if o != nil && !IsNil(o.TupleRawNames) {
		return true
	}

	return false
}

// SetTupleRawNames gets a reference to the given []string and assigns it to the TupleRawNames field.
func (o *ContractABIType) SetTupleRawNames(v []string) {
	o.TupleRawNames = v
}

// GetElem returns the Elem field value if set, zero value otherwise.
func (o *ContractABIType) GetElem() ContractABIType {
	if o == nil || IsNil(o.Elem) {
		var ret ContractABIType
		return ret
	}
	return *o.Elem
}

// GetElemOk returns a tuple with the Elem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIType) GetElemOk() (*ContractABIType, bool) {
	if o == nil || IsNil(o.Elem) {
		return nil, false
	}
	return o.Elem, true
}

// HasElem returns a boolean if a field has been set.
func (o *ContractABIType) HasElem() bool {
	if o != nil && !IsNil(o.Elem) {
		return true
	}

	return false
}

// SetElem gets a reference to the given ContractABIType and assigns it to the Elem field.
func (o *ContractABIType) SetElem(v ContractABIType) {
	o.Elem = &v
}

func (o ContractABIType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractABIType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.TupleElems) {
		toSerialize["tupleElems"] = o.TupleElems
	}
	if !IsNil(o.TupleRawNames) {
		toSerialize["tupleRawNames"] = o.TupleRawNames
	}
	if !IsNil(o.Elem) {
		toSerialize["elem"] = o.Elem
	}
	return toSerialize, nil
}

func (o *ContractABIType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractABIType := _ContractABIType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractABIType)

	if err != nil {
		return err
	}

	*o = ContractABIType(varContractABIType)

	return err
}

type NullableContractABIType struct {
	value *ContractABIType
	isSet bool
}

func (v NullableContractABIType) Get() *ContractABIType {
	return v.value
}

func (v *NullableContractABIType) Set(val *ContractABIType) {
	v.value = val
	v.isSet = true
}

func (v NullableContractABIType) IsSet() bool {
	return v.isSet
}

func (v *NullableContractABIType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractABIType(val *ContractABIType) *NullableContractABIType {
	return &NullableContractABIType{value: val, isSet: true}
}

func (v NullableContractABIType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractABIType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
