/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the BaseUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseUser{}

// BaseUser A user.
type BaseUser struct {
	// The user's email address.
	Email string `json:"email"`
	// The user's name.
	Name string `json:"name"`
}

type _BaseUser BaseUser

// NewBaseUser instantiates a new BaseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseUser(email string, name string) *BaseUser {
	this := BaseUser{}
	this.Email = email
	this.Name = name
	return &this
}

// NewBaseUserWithDefaults instantiates a new BaseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseUserWithDefaults() *BaseUser {
	this := BaseUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *BaseUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *BaseUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *BaseUser) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *BaseUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseUser) SetName(v string) {
	o.Name = v
}

func (o BaseUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableBaseUser struct {
	value *BaseUser
	isSet bool
}

func (v NullableBaseUser) Get() *BaseUser {
	return v.value
}

func (v *NullableBaseUser) Set(val *BaseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseUser(val *BaseUser) *NullableBaseUser {
	return &NullableBaseUser{value: val, isSet: true}
}

func (v NullableBaseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
