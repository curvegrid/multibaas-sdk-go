/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the ContractOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractOverview{}

// ContractOverview A contract overview.
type ContractOverview struct {
	// An alias to easily identify and reference the entity in subsequent requests.
	Label string `json:"label" validate:"regexp=^[a-z0-9_-]+$"`
	// The name of the contract.
	ContractName string `json:"contractName" validate:"regexp=^[^\\"#$%&''()*+,\\/:;<>?[\\\\\\\\\\\\]^\\\\x60{}~]*$"`
	// The contract version.
	Version    string `json:"version" validate:"regexp=^[^\\"#$%&''()*+,\\/:;<>?[\\\\\\\\\\\\]^\\\\x60{}~]*$"`
	IsFavorite *bool  `json:"isFavorite,omitempty"`
	Deployable bool   `json:"deployable"`
	// List of contract instances.
	Instances []ContractInstance `json:"instances"`
}

type _ContractOverview ContractOverview

// NewContractOverview instantiates a new ContractOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractOverview(label string, contractName string, version string, deployable bool, instances []ContractInstance) *ContractOverview {
	this := ContractOverview{}
	this.Label = label
	this.ContractName = contractName
	this.Version = version
	this.Deployable = deployable
	this.Instances = instances
	return &this
}

// NewContractOverviewWithDefaults instantiates a new ContractOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractOverviewWithDefaults() *ContractOverview {
	this := ContractOverview{}
	return &this
}

// GetLabel returns the Label field value
func (o *ContractOverview) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ContractOverview) SetLabel(v string) {
	o.Label = v
}

// GetContractName returns the ContractName field value
func (o *ContractOverview) GetContractName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetContractNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractName, true
}

// SetContractName sets field value
func (o *ContractOverview) SetContractName(v string) {
	o.ContractName = v
}

// GetVersion returns the Version field value
func (o *ContractOverview) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ContractOverview) SetVersion(v string) {
	o.Version = v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *ContractOverview) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *ContractOverview) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *ContractOverview) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetDeployable returns the Deployable field value
func (o *ContractOverview) GetDeployable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deployable
}

// GetDeployableOk returns a tuple with the Deployable field value
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetDeployableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployable, true
}

// SetDeployable sets field value
func (o *ContractOverview) SetDeployable(v bool) {
	o.Deployable = v
}

// GetInstances returns the Instances field value
func (o *ContractOverview) GetInstances() []ContractInstance {
	if o == nil {
		var ret []ContractInstance
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *ContractOverview) GetInstancesOk() ([]ContractInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *ContractOverview) SetInstances(v []ContractInstance) {
	o.Instances = v
}

func (o ContractOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["contractName"] = o.ContractName
	toSerialize["version"] = o.Version
	if !IsNil(o.IsFavorite) {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	toSerialize["deployable"] = o.Deployable
	toSerialize["instances"] = o.Instances
	return toSerialize, nil
}

type NullableContractOverview struct {
	value *ContractOverview
	isSet bool
}

func (v NullableContractOverview) Get() *ContractOverview {
	return v.value
}

func (v *NullableContractOverview) Set(val *ContractOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableContractOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableContractOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractOverview(val *ContractOverview) *NullableContractOverview {
	return &NullableContractOverview{value: val, isSet: true}
}

func (v NullableContractOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
