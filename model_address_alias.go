/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddressAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressAlias{}

// AddressAlias An address and it's alias.
type AddressAlias struct {
	// An alias to easily identify and reference addresses.
	Alias string `json:"alias" validate:"regexp=^[a-z0-9_-]+$"`
	// An ethereum address.
	Address string `json:"address" validate:"regexp=^0[xX][a-fA-F0-9]{40}$"`
}

type _AddressAlias AddressAlias

// NewAddressAlias instantiates a new AddressAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressAlias(alias string, address string) *AddressAlias {
	this := AddressAlias{}
	this.Alias = alias
	this.Address = address
	return &this
}

// NewAddressAliasWithDefaults instantiates a new AddressAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressAliasWithDefaults() *AddressAlias {
	this := AddressAlias{}
	return &this
}

// GetAlias returns the Alias field value
func (o *AddressAlias) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *AddressAlias) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *AddressAlias) SetAlias(v string) {
	o.Alias = v
}

// GetAddress returns the Address field value
func (o *AddressAlias) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressAlias) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressAlias) SetAddress(v string) {
	o.Address = v
}

func (o AddressAlias) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alias"] = o.Alias
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

func (o *AddressAlias) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alias",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressAlias := _AddressAlias{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressAlias)

	if err != nil {
		return err
	}

	*o = AddressAlias(varAddressAlias)

	return err
}

type NullableAddressAlias struct {
	value *AddressAlias
	isSet bool
}

func (v NullableAddressAlias) Get() *AddressAlias {
	return v.value
}

func (v *NullableAddressAlias) Set(val *AddressAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressAlias(val *AddressAlias) *NullableAddressAlias {
	return &NullableAddressAlias{value: val, isSet: true}
}

func (v NullableAddressAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
