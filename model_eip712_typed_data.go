/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EIP712TypedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EIP712TypedData{}

// EIP712TypedData EIP-712 structured typed data object.
type EIP712TypedData struct {
	Types EIP712Types `json:"types"`
	// The root type of the message object. Must correspond to a key in the `types` object.
	PrimaryType string       `json:"primaryType"`
	Domain      EIP712Domain `json:"domain"`
	// The actual data, conforming to the `primaryType` definition in `types`.
	Message map[string]interface{} `json:"message"`
}

// NewEIP712TypedData instantiates a new EIP712TypedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEIP712TypedData(types EIP712Types, primaryType string, domain EIP712Domain, message map[string]interface{}) *EIP712TypedData {
	this := EIP712TypedData{}
	this.Types = types
	this.PrimaryType = primaryType
	this.Domain = domain
	this.Message = message
	return &this
}

// NewEIP712TypedDataWithDefaults instantiates a new EIP712TypedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEIP712TypedDataWithDefaults() *EIP712TypedData {
	this := EIP712TypedData{}
	return &this
}

// GetTypes returns the Types field value
func (o *EIP712TypedData) GetTypes() EIP712Types {
	if o == nil {
		var ret EIP712Types
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *EIP712TypedData) GetTypesOk() (*EIP712Types, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Types, true
}

// SetTypes sets field value
func (o *EIP712TypedData) SetTypes(v EIP712Types) {
	o.Types = v
}

// GetPrimaryType returns the PrimaryType field value
func (o *EIP712TypedData) GetPrimaryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value
// and a boolean to check if the value has been set.
func (o *EIP712TypedData) GetPrimaryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryType, true
}

// SetPrimaryType sets field value
func (o *EIP712TypedData) SetPrimaryType(v string) {
	o.PrimaryType = v
}

// GetDomain returns the Domain field value
func (o *EIP712TypedData) GetDomain() EIP712Domain {
	if o == nil {
		var ret EIP712Domain
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *EIP712TypedData) GetDomainOk() (*EIP712Domain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *EIP712TypedData) SetDomain(v EIP712Domain) {
	o.Domain = v
}

// GetMessage returns the Message field value
func (o *EIP712TypedData) GetMessage() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *EIP712TypedData) GetMessageOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Message, true
}

// SetMessage sets field value
func (o *EIP712TypedData) SetMessage(v map[string]interface{}) {
	o.Message = v
}

func (o EIP712TypedData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EIP712TypedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["types"] = o.Types
	toSerialize["primaryType"] = o.PrimaryType
	toSerialize["domain"] = o.Domain
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableEIP712TypedData struct {
	value *EIP712TypedData
	isSet bool
}

func (v NullableEIP712TypedData) Get() *EIP712TypedData {
	return v.value
}

func (v *NullableEIP712TypedData) Set(val *EIP712TypedData) {
	v.value = val
	v.isSet = true
}

func (v NullableEIP712TypedData) IsSet() bool {
	return v.isSet
}

func (v *NullableEIP712TypedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEIP712TypedData(val *EIP712TypedData) *NullableEIP712TypedData {
	return &NullableEIP712TypedData{value: val, isSet: true}
}

func (v NullableEIP712TypedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEIP712TypedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
