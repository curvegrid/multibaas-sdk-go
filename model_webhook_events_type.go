/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// WebhookEventsType The type of the webhook event.
type WebhookEventsType string

// List of WebhookEventsType
const (
	TRANSACTION_INCLUDED WebhookEventsType = "transaction.included"
	EVENT_EMITTED        WebhookEventsType = "event.emitted"
)

// All allowed values of WebhookEventsType enum
var AllowedWebhookEventsTypeEnumValues = []WebhookEventsType{
	"transaction.included",
	"event.emitted",
}

func (v *WebhookEventsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookEventsType(value)
	for _, existing := range AllowedWebhookEventsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookEventsType", value)
}

// NewWebhookEventsTypeFromValue returns a pointer to a valid WebhookEventsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookEventsTypeFromValue(v string) (*WebhookEventsType, error) {
	ev := WebhookEventsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookEventsType: valid values are %v", v, AllowedWebhookEventsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookEventsType) IsValid() bool {
	for _, existing := range AllowedWebhookEventsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookEventsType value
func (v WebhookEventsType) Ptr() *WebhookEventsType {
	return &v
}

type NullableWebhookEventsType struct {
	value *WebhookEventsType
	isSet bool
}

func (v NullableWebhookEventsType) Get() *WebhookEventsType {
	return v.value
}

func (v *NullableWebhookEventsType) Set(val *WebhookEventsType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEventsType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEventsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEventsType(val *WebhookEventsType) *NullableWebhookEventsType {
	return &NullableWebhookEventsType{value: val, isSet: true}
}

func (v NullableWebhookEventsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEventsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
