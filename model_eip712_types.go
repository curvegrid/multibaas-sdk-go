/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// checks if the EIP712Types type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EIP712Types{}

// EIP712Types A mapping of type names to arrays of fields.
type EIP712Types struct {
	EIP712Domain         []EIP712TypeEntry `json:"EIP712Domain"`
	AdditionalProperties map[string]interface{}
}

type _EIP712Types EIP712Types

// NewEIP712Types instantiates a new EIP712Types object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEIP712Types(eIP712Domain []EIP712TypeEntry) *EIP712Types {
	this := EIP712Types{}
	this.EIP712Domain = eIP712Domain
	return &this
}

// NewEIP712TypesWithDefaults instantiates a new EIP712Types object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEIP712TypesWithDefaults() *EIP712Types {
	this := EIP712Types{}
	return &this
}

// GetEIP712Domain returns the EIP712Domain field value
func (o *EIP712Types) GetEIP712Domain() []EIP712TypeEntry {
	if o == nil {
		var ret []EIP712TypeEntry
		return ret
	}

	return o.EIP712Domain
}

// GetEIP712DomainOk returns a tuple with the EIP712Domain field value
// and a boolean to check if the value has been set.
func (o *EIP712Types) GetEIP712DomainOk() ([]EIP712TypeEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.EIP712Domain, true
}

// SetEIP712Domain sets field value
func (o *EIP712Types) SetEIP712Domain(v []EIP712TypeEntry) {
	o.EIP712Domain = v
}

func (o EIP712Types) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EIP712Types) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["EIP712Domain"] = o.EIP712Domain

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EIP712Types) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"EIP712Domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEIP712Types := _EIP712Types{}

	err = json.Unmarshal(data, &varEIP712Types)

	if err != nil {
		return err
	}

	*o = EIP712Types(varEIP712Types)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "EIP712Domain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEIP712Types struct {
	value *EIP712Types
	isSet bool
}

func (v NullableEIP712Types) Get() *EIP712Types {
	return v.value
}

func (v *NullableEIP712Types) Set(val *EIP712Types) {
	v.value = val
	v.isSet = true
}

func (v NullableEIP712Types) IsSet() bool {
	return v.isSet
}

func (v *NullableEIP712Types) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEIP712Types(val *EIP712Types) *NullableEIP712Types {
	return &NullableEIP712Types{value: val, isSet: true}
}

func (v NullableEIP712Types) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEIP712Types) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
