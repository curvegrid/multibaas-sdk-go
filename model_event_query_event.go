/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventQueryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQueryEvent{}

// EventQueryEvent A query on a single event.
type EventQueryEvent struct {
	// The name of an event.
	EventName string `json:"eventName"`
	// The query information about all the fields to select from an event.
	Select []EventQueryField `json:"select"`
	Filter *EventQueryFilter `json:"filter,omitempty"`
}

type _EventQueryEvent EventQueryEvent

// NewEventQueryEvent instantiates a new EventQueryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQueryEvent(eventName string, select_ []EventQueryField) *EventQueryEvent {
	this := EventQueryEvent{}
	this.EventName = eventName
	this.Select = select_
	return &this
}

// NewEventQueryEventWithDefaults instantiates a new EventQueryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryEventWithDefaults() *EventQueryEvent {
	this := EventQueryEvent{}
	return &this
}

// GetEventName returns the EventName field value
func (o *EventQueryEvent) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *EventQueryEvent) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *EventQueryEvent) SetEventName(v string) {
	o.EventName = v
}

// GetSelect returns the Select field value
func (o *EventQueryEvent) GetSelect() []EventQueryField {
	if o == nil {
		var ret []EventQueryField
		return ret
	}

	return o.Select
}

// GetSelectOk returns a tuple with the Select field value
// and a boolean to check if the value has been set.
func (o *EventQueryEvent) GetSelectOk() ([]EventQueryField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Select, true
}

// SetSelect sets field value
func (o *EventQueryEvent) SetSelect(v []EventQueryField) {
	o.Select = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *EventQueryEvent) GetFilter() EventQueryFilter {
	if o == nil || IsNil(o.Filter) {
		var ret EventQueryFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryEvent) GetFilterOk() (*EventQueryFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *EventQueryEvent) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given EventQueryFilter and assigns it to the Filter field.
func (o *EventQueryEvent) SetFilter(v EventQueryFilter) {
	o.Filter = &v
}

func (o EventQueryEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQueryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventName"] = o.EventName
	toSerialize["select"] = o.Select
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

func (o *EventQueryEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventName",
		"select",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventQueryEvent := _EventQueryEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventQueryEvent)

	if err != nil {
		return err
	}

	*o = EventQueryEvent(varEventQueryEvent)

	return err
}

type NullableEventQueryEvent struct {
	value *EventQueryEvent
	isSet bool
}

func (v NullableEventQueryEvent) Get() *EventQueryEvent {
	return v.value
}

func (v *NullableEventQueryEvent) Set(val *EventQueryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQueryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQueryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQueryEvent(val *EventQueryEvent) *NullableEventQueryEvent {
	return &NullableEventQueryEvent{value: val, isSet: true}
}

func (v NullableEventQueryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQueryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
