/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EIP712TypeEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EIP712TypeEntry{}

// EIP712TypeEntry struct for EIP712TypeEntry
type EIP712TypeEntry struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// NewEIP712TypeEntry instantiates a new EIP712TypeEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEIP712TypeEntry(name string, type_ string) *EIP712TypeEntry {
	this := EIP712TypeEntry{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewEIP712TypeEntryWithDefaults instantiates a new EIP712TypeEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEIP712TypeEntryWithDefaults() *EIP712TypeEntry {
	this := EIP712TypeEntry{}
	return &this
}

// GetName returns the Name field value
func (o *EIP712TypeEntry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EIP712TypeEntry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EIP712TypeEntry) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *EIP712TypeEntry) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EIP712TypeEntry) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EIP712TypeEntry) SetType(v string) {
	o.Type = v
}

func (o EIP712TypeEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EIP712TypeEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableEIP712TypeEntry struct {
	value *EIP712TypeEntry
	isSet bool
}

func (v NullableEIP712TypeEntry) Get() *EIP712TypeEntry {
	return v.value
}

func (v *NullableEIP712TypeEntry) Set(val *EIP712TypeEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableEIP712TypeEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEIP712TypeEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEIP712TypeEntry(val *EIP712TypeEntry) *NullableEIP712TypeEntry {
	return &NullableEIP712TypeEntry{value: val, isSet: true}
}

func (v NullableEIP712TypeEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEIP712TypeEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
