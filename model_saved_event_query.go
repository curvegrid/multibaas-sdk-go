/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the SavedEventQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SavedEventQuery{}

// SavedEventQuery A saved event query.
type SavedEventQuery struct {
	Id int64 `json:"id"`
	// An event query label.
	Label string     "json:\"label\" validate:\"regexp=^[^<>?&\\\\\\\"'\\\\`\\/\\\\\\\\]*$\""
	Query EventQuery `json:"query"`
	// Specifies if this a system-generated query which is not modifiable by the user.
	IsSystem bool `json:"isSystem"`
}

type _SavedEventQuery SavedEventQuery

// NewSavedEventQuery instantiates a new SavedEventQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSavedEventQuery(id int64, label string, query EventQuery, isSystem bool) *SavedEventQuery {
	this := SavedEventQuery{}
	this.Id = id
	this.Label = label
	this.Query = query
	this.IsSystem = isSystem
	return &this
}

// NewSavedEventQueryWithDefaults instantiates a new SavedEventQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSavedEventQueryWithDefaults() *SavedEventQuery {
	this := SavedEventQuery{}
	return &this
}

// GetId returns the Id field value
func (o *SavedEventQuery) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SavedEventQuery) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SavedEventQuery) SetId(v int64) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *SavedEventQuery) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SavedEventQuery) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SavedEventQuery) SetLabel(v string) {
	o.Label = v
}

// GetQuery returns the Query field value
func (o *SavedEventQuery) GetQuery() EventQuery {
	if o == nil {
		var ret EventQuery
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SavedEventQuery) GetQueryOk() (*EventQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SavedEventQuery) SetQuery(v EventQuery) {
	o.Query = v
}

// GetIsSystem returns the IsSystem field value
func (o *SavedEventQuery) GetIsSystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSystem
}

// GetIsSystemOk returns a tuple with the IsSystem field value
// and a boolean to check if the value has been set.
func (o *SavedEventQuery) GetIsSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSystem, true
}

// SetIsSystem sets field value
func (o *SavedEventQuery) SetIsSystem(v bool) {
	o.IsSystem = v
}

func (o SavedEventQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["query"] = o.Query
	toSerialize["isSystem"] = o.IsSystem
	return toSerialize, nil
}

type NullableSavedEventQuery struct {
	value *SavedEventQuery
	isSet bool
}

func (v NullableSavedEventQuery) Get() *SavedEventQuery {
	return v.value
}

func (v *NullableSavedEventQuery) Set(val *SavedEventQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSavedEventQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSavedEventQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavedEventQuery(val *SavedEventQuery) *NullableSavedEventQuery {
	return &NullableSavedEventQuery{value: val, isSet: true}
}

func (v NullableSavedEventQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavedEventQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
