/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EventQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQuery{}

// EventQuery An event query.
type EventQuery struct {
	Events []EventQueryEvent `json:"events"`
	// The results will be grouped according to this field. An aggregator for non Group By fields must be specified if groupBy is specified.
	GroupBy *string `json:"groupBy,omitempty"`
	// The results will be ordered according to this field.
	OrderBy *string `json:"orderBy,omitempty"`
	// Specify ascending or descending order, the default is \"ASC\".
	Order *string `json:"order,omitempty"`
}

type _EventQuery EventQuery

// NewEventQuery instantiates a new EventQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQuery(events []EventQueryEvent) *EventQuery {
	this := EventQuery{}
	this.Events = events
	return &this
}

// NewEventQueryWithDefaults instantiates a new EventQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryWithDefaults() *EventQuery {
	this := EventQuery{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventQuery) GetEvents() []EventQueryEvent {
	if o == nil {
		var ret []EventQueryEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventQuery) GetEventsOk() ([]EventQueryEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventQuery) SetEvents(v []EventQueryEvent) {
	o.Events = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *EventQuery) GetGroupBy() string {
	if o == nil || IsNil(o.GroupBy) {
		var ret string
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQuery) GetGroupByOk() (*string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *EventQuery) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given string and assigns it to the GroupBy field.
func (o *EventQuery) SetGroupBy(v string) {
	o.GroupBy = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *EventQuery) GetOrderBy() string {
	if o == nil || IsNil(o.OrderBy) {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQuery) GetOrderByOk() (*string, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *EventQuery) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *EventQuery) SetOrderBy(v string) {
	o.OrderBy = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *EventQuery) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQuery) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *EventQuery) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *EventQuery) SetOrder(v string) {
	o.Order = &v
}

func (o EventQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableEventQuery struct {
	value *EventQuery
	isSet bool
}

func (v NullableEventQuery) Get() *EventQuery {
	return v.value
}

func (v *NullableEventQuery) Set(val *EventQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQuery(val *EventQuery) *NullableEventQuery {
	return &NullableEventQuery{value: val, isSet: true}
}

func (v NullableEventQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
