/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the ContractABIMethodArgument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractABIMethodArgument{}

// ContractABIMethodArgument A contract function argument.
type ContractABIMethodArgument struct {
	Name           *string                           `json:"name,omitempty"`
	Type           *ContractABIType                  `json:"type,omitempty"`
	TypeConversion NullableContractABITypeConversion `json:"typeConversion"`
	Notes          *string                           `json:"notes,omitempty"`
}

// NewContractABIMethodArgument instantiates a new ContractABIMethodArgument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractABIMethodArgument(typeConversion NullableContractABITypeConversion) *ContractABIMethodArgument {
	this := ContractABIMethodArgument{}
	this.TypeConversion = typeConversion
	return &this
}

// NewContractABIMethodArgumentWithDefaults instantiates a new ContractABIMethodArgument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractABIMethodArgumentWithDefaults() *ContractABIMethodArgument {
	this := ContractABIMethodArgument{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContractABIMethodArgument) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContractABIMethodArgument) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContractABIMethodArgument) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ContractABIMethodArgument) GetType() ContractABIType {
	if o == nil || IsNil(o.Type) {
		var ret ContractABIType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetTypeOk() (*ContractABIType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ContractABIMethodArgument) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ContractABIType and assigns it to the Type field.
func (o *ContractABIMethodArgument) SetType(v ContractABIType) {
	o.Type = &v
}

// GetTypeConversion returns the TypeConversion field value
// If the value is explicit nil, the zero value for ContractABITypeConversion will be returned
func (o *ContractABIMethodArgument) GetTypeConversion() ContractABITypeConversion {
	if o == nil || o.TypeConversion.Get() == nil {
		var ret ContractABITypeConversion
		return ret
	}

	return *o.TypeConversion.Get()
}

// GetTypeConversionOk returns a tuple with the TypeConversion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractABIMethodArgument) GetTypeConversionOk() (*ContractABITypeConversion, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeConversion.Get(), o.TypeConversion.IsSet()
}

// SetTypeConversion sets field value
func (o *ContractABIMethodArgument) SetTypeConversion(v ContractABITypeConversion) {
	o.TypeConversion.Set(&v)
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ContractABIMethodArgument) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ContractABIMethodArgument) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ContractABIMethodArgument) SetNotes(v string) {
	o.Notes = &v
}

func (o ContractABIMethodArgument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractABIMethodArgument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["typeConversion"] = o.TypeConversion.Get()
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return toSerialize, nil
}

type NullableContractABIMethodArgument struct {
	value *ContractABIMethodArgument
	isSet bool
}

func (v NullableContractABIMethodArgument) Get() *ContractABIMethodArgument {
	return v.value
}

func (v *NullableContractABIMethodArgument) Set(val *ContractABIMethodArgument) {
	v.value = val
	v.isSet = true
}

func (v NullableContractABIMethodArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableContractABIMethodArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractABIMethodArgument(val *ContractABIMethodArgument) *NullableContractABIMethodArgument {
	return &NullableContractABIMethodArgument{value: val, isSet: true}
}

func (v NullableContractABIMethodArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractABIMethodArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
