/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContractABIMethodArgument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractABIMethodArgument{}

// ContractABIMethodArgument A contract function argument.
type ContractABIMethodArgument struct {
	Name           string                            `json:"name"`
	Type           ContractABIType                   `json:"type"`
	TypeName       string                            `json:"typeName"`
	TypeConversion NullableContractABITypeConversion `json:"typeConversion"`
	Notes          string                            `json:"notes"`
}

type _ContractABIMethodArgument ContractABIMethodArgument

// NewContractABIMethodArgument instantiates a new ContractABIMethodArgument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractABIMethodArgument(name string, type_ ContractABIType, typeName string, typeConversion NullableContractABITypeConversion, notes string) *ContractABIMethodArgument {
	this := ContractABIMethodArgument{}
	this.Name = name
	this.Type = type_
	this.TypeName = typeName
	this.TypeConversion = typeConversion
	this.Notes = notes
	return &this
}

// NewContractABIMethodArgumentWithDefaults instantiates a new ContractABIMethodArgument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractABIMethodArgumentWithDefaults() *ContractABIMethodArgument {
	this := ContractABIMethodArgument{}
	return &this
}

// GetName returns the Name field value
func (o *ContractABIMethodArgument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContractABIMethodArgument) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ContractABIMethodArgument) GetType() ContractABIType {
	if o == nil {
		var ret ContractABIType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetTypeOk() (*ContractABIType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContractABIMethodArgument) SetType(v ContractABIType) {
	o.Type = v
}

// GetTypeName returns the TypeName field value
func (o *ContractABIMethodArgument) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *ContractABIMethodArgument) SetTypeName(v string) {
	o.TypeName = v
}

// GetTypeConversion returns the TypeConversion field value
// If the value is explicit nil, the zero value for ContractABITypeConversion will be returned
func (o *ContractABIMethodArgument) GetTypeConversion() ContractABITypeConversion {
	if o == nil || o.TypeConversion.Get() == nil {
		var ret ContractABITypeConversion
		return ret
	}

	return *o.TypeConversion.Get()
}

// GetTypeConversionOk returns a tuple with the TypeConversion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractABIMethodArgument) GetTypeConversionOk() (*ContractABITypeConversion, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeConversion.Get(), o.TypeConversion.IsSet()
}

// SetTypeConversion sets field value
func (o *ContractABIMethodArgument) SetTypeConversion(v ContractABITypeConversion) {
	o.TypeConversion.Set(&v)
}

// GetNotes returns the Notes field value
func (o *ContractABIMethodArgument) GetNotes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value
// and a boolean to check if the value has been set.
func (o *ContractABIMethodArgument) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Notes, true
}

// SetNotes sets field value
func (o *ContractABIMethodArgument) SetNotes(v string) {
	o.Notes = v
}

func (o ContractABIMethodArgument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractABIMethodArgument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["typeName"] = o.TypeName
	toSerialize["typeConversion"] = o.TypeConversion.Get()
	toSerialize["notes"] = o.Notes
	return toSerialize, nil
}

func (o *ContractABIMethodArgument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"typeName",
		"typeConversion",
		"notes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractABIMethodArgument := _ContractABIMethodArgument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractABIMethodArgument)

	if err != nil {
		return err
	}

	*o = ContractABIMethodArgument(varContractABIMethodArgument)

	return err
}

type NullableContractABIMethodArgument struct {
	value *ContractABIMethodArgument
	isSet bool
}

func (v NullableContractABIMethodArgument) Get() *ContractABIMethodArgument {
	return v.value
}

func (v *NullableContractABIMethodArgument) Set(val *ContractABIMethodArgument) {
	v.value = val
	v.isSet = true
}

func (v NullableContractABIMethodArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableContractABIMethodArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractABIMethodArgument(val *ContractABIMethodArgument) *NullableContractABIMethodArgument {
	return &NullableContractABIMethodArgument{value: val, isSet: true}
}

func (v NullableContractABIMethodArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractABIMethodArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
