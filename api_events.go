/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type EventsAPI interface {

	/*
		GetEventCount Get event count

		Gets the number of events stored in the database.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetEventCountRequest
	*/
	GetEventCount(ctx context.Context) ApiGetEventCountRequest

	// GetEventCountExecute executes the request
	//  @return GetEventCount200Response
	GetEventCountExecute(r ApiGetEventCountRequest) (*GetEventCount200Response, *http.Response, error)

	/*
		ListEvents List events

		Returns all events stored in the database.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListEventsRequest
	*/
	ListEvents(ctx context.Context) ApiListEventsRequest

	// ListEventsExecute executes the request
	//  @return ListEvents200Response
	ListEventsExecute(r ApiListEventsRequest) (*ListEvents200Response, *http.Response, error)
}

// EventsAPIService EventsAPI service
type EventsAPIService service

type ApiGetEventCountRequest struct {
	ctx             context.Context
	ApiService      EventsAPI
	blockHash       *string
	blockNumber     *int64
	txIndexInBlock  *int64
	eventIndexInLog *int64
	txHash          *string
	fromConstructor *bool
	chain           *ChainName
	contractAddress *string
	contractLabel   *string
	eventSignature  *string
	limit           *int64
	offset          *int64
}

// Filter events by a block hash.
func (r ApiGetEventCountRequest) BlockHash(blockHash string) ApiGetEventCountRequest {
	r.blockHash = &blockHash
	return r
}

// Filter events by a block number.
func (r ApiGetEventCountRequest) BlockNumber(blockNumber int64) ApiGetEventCountRequest {
	r.blockNumber = &blockNumber
	return r
}

// Filter events by a transaction&#39;s index in the block.
func (r ApiGetEventCountRequest) TxIndexInBlock(txIndexInBlock int64) ApiGetEventCountRequest {
	r.txIndexInBlock = &txIndexInBlock
	return r
}

// Filter events by index in the log.
func (r ApiGetEventCountRequest) EventIndexInLog(eventIndexInLog int64) ApiGetEventCountRequest {
	r.eventIndexInLog = &eventIndexInLog
	return r
}

// Filter events by a transaction hash.
func (r ApiGetEventCountRequest) TxHash(txHash string) ApiGetEventCountRequest {
	r.txHash = &txHash
	return r
}

// Filter events by whether they were emitted from the constructor function.
func (r ApiGetEventCountRequest) FromConstructor(fromConstructor bool) ApiGetEventCountRequest {
	r.fromConstructor = &fromConstructor
	return r
}

// Filter events by a chain name.
func (r ApiGetEventCountRequest) Chain(chain ChainName) ApiGetEventCountRequest {
	r.chain = &chain
	return r
}

// Filter events by a contract address.
func (r ApiGetEventCountRequest) ContractAddress(contractAddress string) ApiGetEventCountRequest {
	r.contractAddress = &contractAddress
	return r
}

// Filter events by a contract label.
func (r ApiGetEventCountRequest) ContractLabel(contractLabel string) ApiGetEventCountRequest {
	r.contractLabel = &contractLabel
	return r
}

// Filter events by the signature.
func (r ApiGetEventCountRequest) EventSignature(eventSignature string) ApiGetEventCountRequest {
	r.eventSignature = &eventSignature
	return r
}

func (r ApiGetEventCountRequest) Limit(limit int64) ApiGetEventCountRequest {
	r.limit = &limit
	return r
}

func (r ApiGetEventCountRequest) Offset(offset int64) ApiGetEventCountRequest {
	r.offset = &offset
	return r
}

func (r ApiGetEventCountRequest) Execute() (*GetEventCount200Response, *http.Response, error) {
	return r.ApiService.GetEventCountExecute(r)
}

/*
GetEventCount Get event count

Gets the number of events stored in the database.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEventCountRequest
*/
func (a *EventsAPIService) GetEventCount(ctx context.Context) ApiGetEventCountRequest {
	return ApiGetEventCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetEventCount200Response
func (a *EventsAPIService) GetEventCountExecute(r ApiGetEventCountRequest) (*GetEventCount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetEventCount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.GetEventCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_hash", r.blockHash, "")
	}
	if r.blockNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_number", r.blockNumber, "")
	}
	if r.txIndexInBlock != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_index_in_block", r.txIndexInBlock, "")
	}
	if r.eventIndexInLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_index_in_log", r.eventIndexInLog, "")
	}
	if r.txHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_hash", r.txHash, "")
	}
	if r.fromConstructor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_constructor", r.fromConstructor, "")
	}
	if r.chain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chain", r.chain, "")
	}
	if r.contractAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "")
	}
	if r.contractLabel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_label", r.contractLabel, "")
	}
	if r.eventSignature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_signature", r.eventSignature, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListEventsRequest struct {
	ctx             context.Context
	ApiService      EventsAPI
	blockHash       *string
	blockNumber     *int64
	txIndexInBlock  *int64
	eventIndexInLog *int64
	txHash          *string
	fromConstructor *bool
	chain           *ChainName
	contractAddress *string
	contractLabel   *string
	eventSignature  *string
	limit           *int64
	offset          *int64
}

// Filter events by a block hash.
func (r ApiListEventsRequest) BlockHash(blockHash string) ApiListEventsRequest {
	r.blockHash = &blockHash
	return r
}

// Filter events by a block number.
func (r ApiListEventsRequest) BlockNumber(blockNumber int64) ApiListEventsRequest {
	r.blockNumber = &blockNumber
	return r
}

// Filter events by a transaction&#39;s index in the block.
func (r ApiListEventsRequest) TxIndexInBlock(txIndexInBlock int64) ApiListEventsRequest {
	r.txIndexInBlock = &txIndexInBlock
	return r
}

// Filter events by index in the log.
func (r ApiListEventsRequest) EventIndexInLog(eventIndexInLog int64) ApiListEventsRequest {
	r.eventIndexInLog = &eventIndexInLog
	return r
}

// Filter events by a transaction hash.
func (r ApiListEventsRequest) TxHash(txHash string) ApiListEventsRequest {
	r.txHash = &txHash
	return r
}

// Filter events by whether they were emitted from the constructor function.
func (r ApiListEventsRequest) FromConstructor(fromConstructor bool) ApiListEventsRequest {
	r.fromConstructor = &fromConstructor
	return r
}

// Filter events by a chain name.
func (r ApiListEventsRequest) Chain(chain ChainName) ApiListEventsRequest {
	r.chain = &chain
	return r
}

// Filter events by a contract address.
func (r ApiListEventsRequest) ContractAddress(contractAddress string) ApiListEventsRequest {
	r.contractAddress = &contractAddress
	return r
}

// Filter events by a contract label.
func (r ApiListEventsRequest) ContractLabel(contractLabel string) ApiListEventsRequest {
	r.contractLabel = &contractLabel
	return r
}

// Filter events by the signature.
func (r ApiListEventsRequest) EventSignature(eventSignature string) ApiListEventsRequest {
	r.eventSignature = &eventSignature
	return r
}

func (r ApiListEventsRequest) Limit(limit int64) ApiListEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiListEventsRequest) Offset(offset int64) ApiListEventsRequest {
	r.offset = &offset
	return r
}

func (r ApiListEventsRequest) Execute() (*ListEvents200Response, *http.Response, error) {
	return r.ApiService.ListEventsExecute(r)
}

/*
ListEvents List events

Returns all events stored in the database.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListEventsRequest
*/
func (a *EventsAPIService) ListEvents(ctx context.Context) ApiListEventsRequest {
	return ApiListEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListEvents200Response
func (a *EventsAPIService) ListEventsExecute(r ApiListEventsRequest) (*ListEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.ListEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_hash", r.blockHash, "")
	}
	if r.blockNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "block_number", r.blockNumber, "")
	}
	if r.txIndexInBlock != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_index_in_block", r.txIndexInBlock, "")
	}
	if r.eventIndexInLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_index_in_log", r.eventIndexInLog, "")
	}
	if r.txHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_hash", r.txHash, "")
	}
	if r.fromConstructor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_constructor", r.fromConstructor, "")
	}
	if r.chain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chain", r.chain, "")
	}
	if r.contractAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "")
	}
	if r.contractLabel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_label", r.contractLabel, "")
	}
	if r.eventSignature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_signature", r.eventSignature, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
