/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the Log type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Log{}

// Log A contract log event.
type Log struct {
	// An ethereum address.
	Address string `json:"address"`
	// A list of topics provided by the contract.
	Topics []string `json:"topics"`
	// A hex string.
	Data string `json:"data"`
	// A hex string.
	BlockNumber string `json:"blockNumber"`
	// The keccak256 hash as a hex string of 256 bits.
	TransactionHash string `json:"transactionHash"`
	// A hex string.
	TransactionIndex string `json:"transactionIndex"`
	// The keccak256 hash as a hex string of 256 bits.
	BlockHash string `json:"blockHash"`
	// A hex string.
	LogIndex string `json:"logIndex"`
	// True if this log was reverted due to a chain reorganization.
	Removed bool `json:"removed"`
}

// NewLog instantiates a new Log object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLog(address string, topics []string, data string, blockNumber string, transactionHash string, transactionIndex string, blockHash string, logIndex string, removed bool) *Log {
	this := Log{}
	this.Address = address
	this.Topics = topics
	this.Data = data
	this.BlockNumber = blockNumber
	this.TransactionHash = transactionHash
	this.TransactionIndex = transactionIndex
	this.BlockHash = blockHash
	this.LogIndex = logIndex
	this.Removed = removed
	return &this
}

// NewLogWithDefaults instantiates a new Log object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogWithDefaults() *Log {
	this := Log{}
	return &this
}

// GetAddress returns the Address field value
func (o *Log) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Log) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Log) SetAddress(v string) {
	o.Address = v
}

// GetTopics returns the Topics field value
func (o *Log) GetTopics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value
// and a boolean to check if the value has been set.
func (o *Log) GetTopicsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topics, true
}

// SetTopics sets field value
func (o *Log) SetTopics(v []string) {
	o.Topics = v
}

// GetData returns the Data field value
func (o *Log) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Log) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *Log) SetData(v string) {
	o.Data = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *Log) GetBlockNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *Log) GetBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *Log) SetBlockNumber(v string) {
	o.BlockNumber = v
}

// GetTransactionHash returns the TransactionHash field value
func (o *Log) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *Log) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *Log) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetTransactionIndex returns the TransactionIndex field value
func (o *Log) GetTransactionIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionIndex
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value
// and a boolean to check if the value has been set.
func (o *Log) GetTransactionIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionIndex, true
}

// SetTransactionIndex sets field value
func (o *Log) SetTransactionIndex(v string) {
	o.TransactionIndex = v
}

// GetBlockHash returns the BlockHash field value
func (o *Log) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *Log) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *Log) SetBlockHash(v string) {
	o.BlockHash = v
}

// GetLogIndex returns the LogIndex field value
func (o *Log) GetLogIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogIndex
}

// GetLogIndexOk returns a tuple with the LogIndex field value
// and a boolean to check if the value has been set.
func (o *Log) GetLogIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogIndex, true
}

// SetLogIndex sets field value
func (o *Log) SetLogIndex(v string) {
	o.LogIndex = v
}

// GetRemoved returns the Removed field value
func (o *Log) GetRemoved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *Log) GetRemovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Removed, true
}

// SetRemoved sets field value
func (o *Log) SetRemoved(v bool) {
	o.Removed = v
}

func (o Log) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Log) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["topics"] = o.Topics
	toSerialize["data"] = o.Data
	toSerialize["blockNumber"] = o.BlockNumber
	toSerialize["transactionHash"] = o.TransactionHash
	toSerialize["transactionIndex"] = o.TransactionIndex
	toSerialize["blockHash"] = o.BlockHash
	toSerialize["logIndex"] = o.LogIndex
	toSerialize["removed"] = o.Removed
	return toSerialize, nil
}

type NullableLog struct {
	value *Log
	isSet bool
}

func (v NullableLog) Get() *Log {
	return v.value
}

func (v *NullableLog) Set(val *Log) {
	v.value = val
	v.isSet = true
}

func (v NullableLog) IsSet() bool {
	return v.isSet
}

func (v *NullableLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLog(val *Log) *NullableLog {
	return &NullableLog{value: val, isSet: true}
}

func (v NullableLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
