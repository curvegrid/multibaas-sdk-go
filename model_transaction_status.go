/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// TransactionStatus The status of a TXM transaction.
type TransactionStatus string

// List of TransactionStatus
const (
	PENDING              TransactionStatus = "pending"
	INCLUDED             TransactionStatus = "included"
	REPLACED             TransactionStatus = "replaced"
	CANCELLED            TransactionStatus = "cancelled"
	REJECTED             TransactionStatus = "rejected"
	EXCEEDED_RETRY_LIMIT TransactionStatus = "exceeded retry limit"
)

// All allowed values of TransactionStatus enum
var AllowedTransactionStatusEnumValues = []TransactionStatus{
	"pending",
	"included",
	"replaced",
	"cancelled",
	"rejected",
	"exceeded retry limit",
}

func (v *TransactionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionStatus(value)
	for _, existing := range AllowedTransactionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionStatus", value)
}

// NewTransactionStatusFromValue returns a pointer to a valid TransactionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionStatusFromValue(v string) (*TransactionStatus, error) {
	ev := TransactionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionStatus: valid values are %v", v, AllowedTransactionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionStatus) IsValid() bool {
	for _, existing := range AllowedTransactionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionStatus value
func (v TransactionStatus) Ptr() *TransactionStatus {
	return &v
}

type NullableTransactionStatus struct {
	value *TransactionStatus
	isSet bool
}

func (v NullableTransactionStatus) Get() *TransactionStatus {
	return v.value
}

func (v *NullableTransactionStatus) Set(val *TransactionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStatus(val *TransactionStatus) *NullableTransactionStatus {
	return &NullableTransactionStatus{value: val, isSet: true}
}

func (v NullableTransactionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
