/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Invite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invite{}

// Invite An invite with groups.
type Invite struct {
	// The invitee's email address.
	Email    string  `json:"email"`
	GroupIDs []int64 `json:"groupIDs,omitempty"`
}

type _Invite Invite

// NewInvite instantiates a new Invite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvite(email string) *Invite {
	this := Invite{}
	this.Email = email
	return &this
}

// NewInviteWithDefaults instantiates a new Invite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteWithDefaults() *Invite {
	this := Invite{}
	return &this
}

// GetEmail returns the Email field value
func (o *Invite) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Invite) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Invite) SetEmail(v string) {
	o.Email = v
}

// GetGroupIDs returns the GroupIDs field value if set, zero value otherwise.
func (o *Invite) GetGroupIDs() []int64 {
	if o == nil || IsNil(o.GroupIDs) {
		var ret []int64
		return ret
	}
	return o.GroupIDs
}

// GetGroupIDsOk returns a tuple with the GroupIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetGroupIDsOk() ([]int64, bool) {
	if o == nil || IsNil(o.GroupIDs) {
		return nil, false
	}
	return o.GroupIDs, true
}

// HasGroupIDs returns a boolean if a field has been set.
func (o *Invite) HasGroupIDs() bool {
	if o != nil && !IsNil(o.GroupIDs) {
		return true
	}

	return false
}

// SetGroupIDs gets a reference to the given []int64 and assigns it to the GroupIDs field.
func (o *Invite) SetGroupIDs(v []int64) {
	o.GroupIDs = v
}

func (o Invite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.GroupIDs) {
		toSerialize["groupIDs"] = o.GroupIDs
	}
	return toSerialize, nil
}

func (o *Invite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvite := _Invite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvite)

	if err != nil {
		return err
	}

	*o = Invite(varInvite)

	return err
}

type NullableInvite struct {
	value *Invite
	isSet bool
}

func (v NullableInvite) Get() *Invite {
	return v.value
}

func (v *NullableInvite) Set(val *Invite) {
	v.value = val
	v.isSet = true
}

func (v NullableInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvite(val *Invite) *NullableInvite {
	return &NullableInvite{value: val, isSet: true}
}

func (v NullableInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
