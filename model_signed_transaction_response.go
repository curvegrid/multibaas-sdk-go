/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SignedTransactionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignedTransactionResponse{}

// SignedTransactionResponse A transaction that was signed externally and submitted.
type SignedTransactionResponse struct {
	Tx Transaction `json:"tx"`
}

type _SignedTransactionResponse SignedTransactionResponse

// NewSignedTransactionResponse instantiates a new SignedTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignedTransactionResponse(tx Transaction) *SignedTransactionResponse {
	this := SignedTransactionResponse{}
	this.Tx = tx
	return &this
}

// NewSignedTransactionResponseWithDefaults instantiates a new SignedTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignedTransactionResponseWithDefaults() *SignedTransactionResponse {
	this := SignedTransactionResponse{}
	return &this
}

// GetTx returns the Tx field value
func (o *SignedTransactionResponse) GetTx() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *SignedTransactionResponse) GetTxOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *SignedTransactionResponse) SetTx(v Transaction) {
	o.Tx = v
}

func (o SignedTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignedTransactionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tx"] = o.Tx
	return toSerialize, nil
}

func (o *SignedTransactionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignedTransactionResponse := _SignedTransactionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignedTransactionResponse)

	if err != nil {
		return err
	}

	*o = SignedTransactionResponse(varSignedTransactionResponse)

	return err
}

type NullableSignedTransactionResponse struct {
	value *SignedTransactionResponse
	isSet bool
}

func (v NullableSignedTransactionResponse) Get() *SignedTransactionResponse {
	return v.value
}

func (v *NullableSignedTransactionResponse) Set(val *SignedTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSignedTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSignedTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignedTransactionResponse(val *SignedTransactionResponse) *NullableSignedTransactionResponse {
	return &NullableSignedTransactionResponse{value: val, isSet: true}
}

func (v NullableSignedTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignedTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
