/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the StandaloneWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandaloneWallet{}

// StandaloneWallet An object containing an HSM wallet's details.
type StandaloneWallet struct {
	// The Application ID that accesses the Key Vault.
	ClientID *string `json:"clientID,omitempty"`
	// The Resource Group Name for the resource being accessed.
	BaseGroupName string `json:"baseGroupName"`
	// The name given to the vault your key is stored in.
	VaultName *string `json:"vaultName,omitempty"`
	KeyName   string  `json:"keyName"`
	// The current version of your key.
	KeyVersion *string `json:"keyVersion,omitempty"`
	// An ethereum address.
	PublicAddress string `json:"publicAddress"`
}

// NewStandaloneWallet instantiates a new StandaloneWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandaloneWallet(baseGroupName string, keyName string, publicAddress string) *StandaloneWallet {
	this := StandaloneWallet{}
	this.BaseGroupName = baseGroupName
	this.KeyName = keyName
	this.PublicAddress = publicAddress
	return &this
}

// NewStandaloneWalletWithDefaults instantiates a new StandaloneWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandaloneWalletWithDefaults() *StandaloneWallet {
	this := StandaloneWallet{}
	return &this
}

// GetClientID returns the ClientID field value if set, zero value otherwise.
func (o *StandaloneWallet) GetClientID() string {
	if o == nil || IsNil(o.ClientID) {
		var ret string
		return ret
	}
	return *o.ClientID
}

// GetClientIDOk returns a tuple with the ClientID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetClientIDOk() (*string, bool) {
	if o == nil || IsNil(o.ClientID) {
		return nil, false
	}
	return o.ClientID, true
}

// HasClientID returns a boolean if a field has been set.
func (o *StandaloneWallet) HasClientID() bool {
	if o != nil && !IsNil(o.ClientID) {
		return true
	}

	return false
}

// SetClientID gets a reference to the given string and assigns it to the ClientID field.
func (o *StandaloneWallet) SetClientID(v string) {
	o.ClientID = &v
}

// GetBaseGroupName returns the BaseGroupName field value
func (o *StandaloneWallet) GetBaseGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseGroupName
}

// GetBaseGroupNameOk returns a tuple with the BaseGroupName field value
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetBaseGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseGroupName, true
}

// SetBaseGroupName sets field value
func (o *StandaloneWallet) SetBaseGroupName(v string) {
	o.BaseGroupName = v
}

// GetVaultName returns the VaultName field value if set, zero value otherwise.
func (o *StandaloneWallet) GetVaultName() string {
	if o == nil || IsNil(o.VaultName) {
		var ret string
		return ret
	}
	return *o.VaultName
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.VaultName) {
		return nil, false
	}
	return o.VaultName, true
}

// HasVaultName returns a boolean if a field has been set.
func (o *StandaloneWallet) HasVaultName() bool {
	if o != nil && !IsNil(o.VaultName) {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given string and assigns it to the VaultName field.
func (o *StandaloneWallet) SetVaultName(v string) {
	o.VaultName = &v
}

// GetKeyName returns the KeyName field value
func (o *StandaloneWallet) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *StandaloneWallet) SetKeyName(v string) {
	o.KeyName = v
}

// GetKeyVersion returns the KeyVersion field value if set, zero value otherwise.
func (o *StandaloneWallet) GetKeyVersion() string {
	if o == nil || IsNil(o.KeyVersion) {
		var ret string
		return ret
	}
	return *o.KeyVersion
}

// GetKeyVersionOk returns a tuple with the KeyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetKeyVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KeyVersion) {
		return nil, false
	}
	return o.KeyVersion, true
}

// HasKeyVersion returns a boolean if a field has been set.
func (o *StandaloneWallet) HasKeyVersion() bool {
	if o != nil && !IsNil(o.KeyVersion) {
		return true
	}

	return false
}

// SetKeyVersion gets a reference to the given string and assigns it to the KeyVersion field.
func (o *StandaloneWallet) SetKeyVersion(v string) {
	o.KeyVersion = &v
}

// GetPublicAddress returns the PublicAddress field value
func (o *StandaloneWallet) GetPublicAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicAddress
}

// GetPublicAddressOk returns a tuple with the PublicAddress field value
// and a boolean to check if the value has been set.
func (o *StandaloneWallet) GetPublicAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicAddress, true
}

// SetPublicAddress sets field value
func (o *StandaloneWallet) SetPublicAddress(v string) {
	o.PublicAddress = v
}

func (o StandaloneWallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandaloneWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientID) {
		toSerialize["clientID"] = o.ClientID
	}
	toSerialize["baseGroupName"] = o.BaseGroupName
	if !IsNil(o.VaultName) {
		toSerialize["vaultName"] = o.VaultName
	}
	toSerialize["keyName"] = o.KeyName
	if !IsNil(o.KeyVersion) {
		toSerialize["keyVersion"] = o.KeyVersion
	}
	toSerialize["publicAddress"] = o.PublicAddress
	return toSerialize, nil
}

type NullableStandaloneWallet struct {
	value *StandaloneWallet
	isSet bool
}

func (v NullableStandaloneWallet) Get() *StandaloneWallet {
	return v.value
}

func (v *NullableStandaloneWallet) Set(val *StandaloneWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableStandaloneWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableStandaloneWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandaloneWallet(val *StandaloneWallet) *NullableStandaloneWallet {
	return &NullableStandaloneWallet{value: val, isSet: true}
}

func (v NullableStandaloneWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandaloneWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
