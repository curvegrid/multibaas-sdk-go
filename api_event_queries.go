/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type EventQueriesAPI interface {

	/*
		CountEventQueryRecords Count event query records

		Returns the record count of the given saved event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param eventQuery An event query label.
		@return ApiCountEventQueryRecordsRequest
	*/
	CountEventQueryRecords(ctx context.Context, eventQuery string) ApiCountEventQueryRecordsRequest

	// CountEventQueryRecordsExecute executes the request
	//  @return CountEventQueryRecords200Response
	CountEventQueryRecordsExecute(r ApiCountEventQueryRecordsRequest) (*CountEventQueryRecords200Response, *http.Response, error)

	/*
		DeleteEventQuery Delete event query

		Deletes the given saved event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param eventQuery An event query label.
		@return ApiDeleteEventQueryRequest
	*/
	DeleteEventQuery(ctx context.Context, eventQuery string) ApiDeleteEventQueryRequest

	// DeleteEventQueryExecute executes the request
	//  @return BaseResponse
	DeleteEventQueryExecute(r ApiDeleteEventQueryRequest) (*BaseResponse, *http.Response, error)

	/*
		ExecuteArbitraryEventQuery Execute arbitrary event query

		Executes an arbitrary event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiExecuteArbitraryEventQueryRequest
	*/
	ExecuteArbitraryEventQuery(ctx context.Context) ApiExecuteArbitraryEventQueryRequest

	// ExecuteArbitraryEventQueryExecute executes the request
	//  @return ExecuteArbitraryEventQuery200Response
	ExecuteArbitraryEventQueryExecute(r ApiExecuteArbitraryEventQueryRequest) (*ExecuteArbitraryEventQuery200Response, *http.Response, error)

	/*
		ExecuteEventQuery Execute event query

		Executes the given saved event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param eventQuery An event query label.
		@return ApiExecuteEventQueryRequest
	*/
	ExecuteEventQuery(ctx context.Context, eventQuery string) ApiExecuteEventQueryRequest

	// ExecuteEventQueryExecute executes the request
	//  @return ExecuteArbitraryEventQuery200Response
	ExecuteEventQueryExecute(r ApiExecuteEventQueryRequest) (*ExecuteArbitraryEventQuery200Response, *http.Response, error)

	/*
		GetEventQuery Get event query

		Returns the given saved event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param eventQuery An event query label.
		@return ApiGetEventQueryRequest
	*/
	GetEventQuery(ctx context.Context, eventQuery string) ApiGetEventQueryRequest

	// GetEventQueryExecute executes the request
	//  @return GetEventQuery200Response
	GetEventQueryExecute(r ApiGetEventQueryRequest) (*GetEventQuery200Response, *http.Response, error)

	/*
		ListEventQueries List event queries

		Returns a list of saved event queries.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListEventQueriesRequest
	*/
	ListEventQueries(ctx context.Context) ApiListEventQueriesRequest

	// ListEventQueriesExecute executes the request
	//  @return ListEventQueries200Response
	ListEventQueriesExecute(r ApiListEventQueriesRequest) (*ListEventQueries200Response, *http.Response, error)

	/*
		SetEventQuery Create or update event query

		Creates or updates the given saved event query.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param eventQuery An event query label.
		@return ApiSetEventQueryRequest
	*/
	SetEventQuery(ctx context.Context, eventQuery string) ApiSetEventQueryRequest

	// SetEventQueryExecute executes the request
	//  @return BaseResponse
	SetEventQueryExecute(r ApiSetEventQueryRequest) (*BaseResponse, *http.Response, error)
}

// EventQueriesAPIService EventQueriesAPI service
type EventQueriesAPIService service

type ApiCountEventQueryRecordsRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
	eventQuery string
}

func (r ApiCountEventQueryRecordsRequest) Execute() (*CountEventQueryRecords200Response, *http.Response, error) {
	return r.ApiService.CountEventQueryRecordsExecute(r)
}

/*
CountEventQueryRecords Count event query records

Returns the record count of the given saved event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventQuery An event query label.
	@return ApiCountEventQueryRecordsRequest
*/
func (a *EventQueriesAPIService) CountEventQueryRecords(ctx context.Context, eventQuery string) ApiCountEventQueryRecordsRequest {
	return ApiCountEventQueryRecordsRequest{
		ApiService: a,
		ctx:        ctx,
		eventQuery: eventQuery,
	}
}

// Execute executes the request
//
//	@return CountEventQueryRecords200Response
func (a *EventQueriesAPIService) CountEventQueryRecordsExecute(r ApiCountEventQueryRecordsRequest) (*CountEventQueryRecords200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CountEventQueryRecords200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.CountEventQueryRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries/{event_query}/count"
	localVarPath = strings.Replace(localVarPath, "{"+"event_query"+"}", url.PathEscape(parameterValueToString(r.eventQuery, "eventQuery")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteEventQueryRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
	eventQuery string
}

func (r ApiDeleteEventQueryRequest) Execute() (*BaseResponse, *http.Response, error) {
	return r.ApiService.DeleteEventQueryExecute(r)
}

/*
DeleteEventQuery Delete event query

Deletes the given saved event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventQuery An event query label.
	@return ApiDeleteEventQueryRequest
*/
func (a *EventQueriesAPIService) DeleteEventQuery(ctx context.Context, eventQuery string) ApiDeleteEventQueryRequest {
	return ApiDeleteEventQueryRequest{
		ApiService: a,
		ctx:        ctx,
		eventQuery: eventQuery,
	}
}

// Execute executes the request
//
//	@return BaseResponse
func (a *EventQueriesAPIService) DeleteEventQueryExecute(r ApiDeleteEventQueryRequest) (*BaseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.DeleteEventQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries/{event_query}"
	localVarPath = strings.Replace(localVarPath, "{"+"event_query"+"}", url.PathEscape(parameterValueToString(r.eventQuery, "eventQuery")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExecuteArbitraryEventQueryRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
	eventQuery *EventQuery
	offset     *int64
	limit      *int64
}

func (r ApiExecuteArbitraryEventQueryRequest) EventQuery(eventQuery EventQuery) ApiExecuteArbitraryEventQueryRequest {
	r.eventQuery = &eventQuery
	return r
}

func (r ApiExecuteArbitraryEventQueryRequest) Offset(offset int64) ApiExecuteArbitraryEventQueryRequest {
	r.offset = &offset
	return r
}

func (r ApiExecuteArbitraryEventQueryRequest) Limit(limit int64) ApiExecuteArbitraryEventQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiExecuteArbitraryEventQueryRequest) Execute() (*ExecuteArbitraryEventQuery200Response, *http.Response, error) {
	return r.ApiService.ExecuteArbitraryEventQueryExecute(r)
}

/*
ExecuteArbitraryEventQuery Execute arbitrary event query

Executes an arbitrary event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExecuteArbitraryEventQueryRequest
*/
func (a *EventQueriesAPIService) ExecuteArbitraryEventQuery(ctx context.Context) ApiExecuteArbitraryEventQueryRequest {
	return ApiExecuteArbitraryEventQueryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExecuteArbitraryEventQuery200Response
func (a *EventQueriesAPIService) ExecuteArbitraryEventQueryExecute(r ApiExecuteArbitraryEventQueryRequest) (*ExecuteArbitraryEventQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExecuteArbitraryEventQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.ExecuteArbitraryEventQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventQuery == nil {
		return localVarReturnValue, nil, reportError("eventQuery is required and must be specified")
	}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventQuery
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExecuteEventQueryRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
	eventQuery string
	offset     *int64
	limit      *int64
}

func (r ApiExecuteEventQueryRequest) Offset(offset int64) ApiExecuteEventQueryRequest {
	r.offset = &offset
	return r
}

func (r ApiExecuteEventQueryRequest) Limit(limit int64) ApiExecuteEventQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiExecuteEventQueryRequest) Execute() (*ExecuteArbitraryEventQuery200Response, *http.Response, error) {
	return r.ApiService.ExecuteEventQueryExecute(r)
}

/*
ExecuteEventQuery Execute event query

Executes the given saved event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventQuery An event query label.
	@return ApiExecuteEventQueryRequest
*/
func (a *EventQueriesAPIService) ExecuteEventQuery(ctx context.Context, eventQuery string) ApiExecuteEventQueryRequest {
	return ApiExecuteEventQueryRequest{
		ApiService: a,
		ctx:        ctx,
		eventQuery: eventQuery,
	}
}

// Execute executes the request
//
//	@return ExecuteArbitraryEventQuery200Response
func (a *EventQueriesAPIService) ExecuteEventQueryExecute(r ApiExecuteEventQueryRequest) (*ExecuteArbitraryEventQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExecuteArbitraryEventQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.ExecuteEventQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries/{event_query}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"event_query"+"}", url.PathEscape(parameterValueToString(r.eventQuery, "eventQuery")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 10
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventQueryRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
	eventQuery string
}

func (r ApiGetEventQueryRequest) Execute() (*GetEventQuery200Response, *http.Response, error) {
	return r.ApiService.GetEventQueryExecute(r)
}

/*
GetEventQuery Get event query

Returns the given saved event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventQuery An event query label.
	@return ApiGetEventQueryRequest
*/
func (a *EventQueriesAPIService) GetEventQuery(ctx context.Context, eventQuery string) ApiGetEventQueryRequest {
	return ApiGetEventQueryRequest{
		ApiService: a,
		ctx:        ctx,
		eventQuery: eventQuery,
	}
}

// Execute executes the request
//
//	@return GetEventQuery200Response
func (a *EventQueriesAPIService) GetEventQueryExecute(r ApiGetEventQueryRequest) (*GetEventQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetEventQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.GetEventQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries/{event_query}"
	localVarPath = strings.Replace(localVarPath, "{"+"event_query"+"}", url.PathEscape(parameterValueToString(r.eventQuery, "eventQuery")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListEventQueriesRequest struct {
	ctx        context.Context
	ApiService EventQueriesAPI
}

func (r ApiListEventQueriesRequest) Execute() (*ListEventQueries200Response, *http.Response, error) {
	return r.ApiService.ListEventQueriesExecute(r)
}

/*
ListEventQueries List event queries

Returns a list of saved event queries.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListEventQueriesRequest
*/
func (a *EventQueriesAPIService) ListEventQueries(ctx context.Context) ApiListEventQueriesRequest {
	return ApiListEventQueriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListEventQueries200Response
func (a *EventQueriesAPIService) ListEventQueriesExecute(r ApiListEventQueriesRequest) (*ListEventQueries200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListEventQueries200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.ListEventQueries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetEventQueryRequest struct {
	ctx         context.Context
	ApiService  EventQueriesAPI
	eventQuery  string
	eventQuery2 *EventQuery
}

func (r ApiSetEventQueryRequest) EventQuery2(eventQuery2 EventQuery) ApiSetEventQueryRequest {
	r.eventQuery2 = &eventQuery2
	return r
}

func (r ApiSetEventQueryRequest) Execute() (*BaseResponse, *http.Response, error) {
	return r.ApiService.SetEventQueryExecute(r)
}

/*
SetEventQuery Create or update event query

Creates or updates the given saved event query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventQuery An event query label.
	@return ApiSetEventQueryRequest
*/
func (a *EventQueriesAPIService) SetEventQuery(ctx context.Context, eventQuery string) ApiSetEventQueryRequest {
	return ApiSetEventQueryRequest{
		ApiService: a,
		ctx:        ctx,
		eventQuery: eventQuery,
	}
}

// Execute executes the request
//
//	@return BaseResponse
func (a *EventQueriesAPIService) SetEventQueryExecute(r ApiSetEventQueryRequest) (*BaseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventQueriesAPIService.SetEventQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/queries/{event_query}"
	localVarPath = strings.Replace(localVarPath, "{"+"event_query"+"}", url.PathEscape(parameterValueToString(r.eventQuery, "eventQuery")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventQuery2 == nil {
		return localVarReturnValue, nil, reportError("eventQuery2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventQuery2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
