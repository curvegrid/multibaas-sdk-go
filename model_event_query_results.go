/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventQueryResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQueryResults{}

// EventQueryResults Results of an executed event query.
type EventQueryResults struct {
	Rows []map[string]interface{} `json:"rows"`
}

type _EventQueryResults EventQueryResults

// NewEventQueryResults instantiates a new EventQueryResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQueryResults(rows []map[string]interface{}) *EventQueryResults {
	this := EventQueryResults{}
	this.Rows = rows
	return &this
}

// NewEventQueryResultsWithDefaults instantiates a new EventQueryResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryResultsWithDefaults() *EventQueryResults {
	this := EventQueryResults{}
	return &this
}

// GetRows returns the Rows field value
func (o *EventQueryResults) GetRows() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value
// and a boolean to check if the value has been set.
func (o *EventQueryResults) GetRowsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows, true
}

// SetRows sets field value
func (o *EventQueryResults) SetRows(v []map[string]interface{}) {
	o.Rows = v
}

func (o EventQueryResults) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQueryResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rows"] = o.Rows
	return toSerialize, nil
}

func (o *EventQueryResults) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventQueryResults := _EventQueryResults{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventQueryResults)

	if err != nil {
		return err
	}

	*o = EventQueryResults(varEventQueryResults)

	return err
}

type NullableEventQueryResults struct {
	value *EventQueryResults
	isSet bool
}

func (v NullableEventQueryResults) Get() *EventQueryResults {
	return v.value
}

func (v *NullableEventQueryResults) Set(val *EventQueryResults) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQueryResults) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQueryResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQueryResults(val *EventQueryResults) *NullableEventQueryResults {
	return &NullableEventQueryResults{value: val, isSet: true}
}

func (v NullableEventQueryResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQueryResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
