/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContractParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractParameter{}

// ContractParameter Type conversion options for an input or an output of a function or an event.
type ContractParameter struct {
	TypeConversion NullableContractABITypeConversion `json:"typeConversion"`
}

type _ContractParameter ContractParameter

// NewContractParameter instantiates a new ContractParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractParameter(typeConversion NullableContractABITypeConversion) *ContractParameter {
	this := ContractParameter{}
	this.TypeConversion = typeConversion
	return &this
}

// NewContractParameterWithDefaults instantiates a new ContractParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractParameterWithDefaults() *ContractParameter {
	this := ContractParameter{}
	return &this
}

// GetTypeConversion returns the TypeConversion field value
// If the value is explicit nil, the zero value for ContractABITypeConversion will be returned
func (o *ContractParameter) GetTypeConversion() ContractABITypeConversion {
	if o == nil || o.TypeConversion.Get() == nil {
		var ret ContractABITypeConversion
		return ret
	}

	return *o.TypeConversion.Get()
}

// GetTypeConversionOk returns a tuple with the TypeConversion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContractParameter) GetTypeConversionOk() (*ContractABITypeConversion, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeConversion.Get(), o.TypeConversion.IsSet()
}

// SetTypeConversion sets field value
func (o *ContractParameter) SetTypeConversion(v ContractABITypeConversion) {
	o.TypeConversion.Set(&v)
}

func (o ContractParameter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["typeConversion"] = o.TypeConversion.Get()
	return toSerialize, nil
}

func (o *ContractParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"typeConversion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractParameter := _ContractParameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractParameter)

	if err != nil {
		return err
	}

	*o = ContractParameter(varContractParameter)

	return err
}

type NullableContractParameter struct {
	value *ContractParameter
	isSet bool
}

func (v NullableContractParameter) Get() *ContractParameter {
	return v.value
}

func (v *NullableContractParameter) Set(val *ContractParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableContractParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableContractParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractParameter(val *ContractParameter) *NullableContractParameter {
	return &NullableContractParameter{value: val, isSet: true}
}

func (v NullableContractParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
