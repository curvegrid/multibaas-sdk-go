/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the ContractParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractParameter{}

// ContractParameter Type conversion options for an input or an output of a function or an event.
type ContractParameter struct {
	TypeConversion ContractABITypeConversion `json:"typeConversion"`
}

type _ContractParameter ContractParameter

// NewContractParameter instantiates a new ContractParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractParameter(typeConversion ContractABITypeConversion) *ContractParameter {
	this := ContractParameter{}
	this.TypeConversion = typeConversion
	return &this
}

// NewContractParameterWithDefaults instantiates a new ContractParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractParameterWithDefaults() *ContractParameter {
	this := ContractParameter{}
	return &this
}

// GetTypeConversion returns the TypeConversion field value
func (o *ContractParameter) GetTypeConversion() ContractABITypeConversion {
	if o == nil {
		var ret ContractABITypeConversion
		return ret
	}

	return o.TypeConversion
}

// GetTypeConversionOk returns a tuple with the TypeConversion field value
// and a boolean to check if the value has been set.
func (o *ContractParameter) GetTypeConversionOk() (*ContractABITypeConversion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeConversion, true
}

// SetTypeConversion sets field value
func (o *ContractParameter) SetTypeConversion(v ContractABITypeConversion) {
	o.TypeConversion = v
}

func (o ContractParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["typeConversion"] = o.TypeConversion
	return toSerialize, nil
}

type NullableContractParameter struct {
	value *ContractParameter
	isSet bool
}

func (v NullableContractParameter) Get() *ContractParameter {
	return v.value
}

func (v *NullableContractParameter) Set(val *ContractParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableContractParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableContractParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractParameter(val *ContractParameter) *NullableContractParameter {
	return &NullableContractParameter{value: val, isSet: true}
}

func (v NullableContractParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
