/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the TransactionReceipt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionReceipt{}

// TransactionReceipt Record of the transaction's outcome.
type TransactionReceipt struct {
	Data   TransactionReceiptData `json:"data"`
	Events []EventInformation     `json:"events,omitempty"`
}

// NewTransactionReceipt instantiates a new TransactionReceipt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionReceipt(data TransactionReceiptData) *TransactionReceipt {
	this := TransactionReceipt{}
	this.Data = data
	return &this
}

// NewTransactionReceiptWithDefaults instantiates a new TransactionReceipt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionReceiptWithDefaults() *TransactionReceipt {
	this := TransactionReceipt{}
	return &this
}

// GetData returns the Data field value
func (o *TransactionReceipt) GetData() TransactionReceiptData {
	if o == nil {
		var ret TransactionReceiptData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetDataOk() (*TransactionReceiptData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionReceipt) SetData(v TransactionReceiptData) {
	o.Data = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *TransactionReceipt) GetEvents() []EventInformation {
	if o == nil || IsNil(o.Events) {
		var ret []EventInformation
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetEventsOk() ([]EventInformation, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *TransactionReceipt) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []EventInformation and assigns it to the Events field.
func (o *TransactionReceipt) SetEvents(v []EventInformation) {
	o.Events = v
}

func (o TransactionReceipt) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionReceipt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableTransactionReceipt struct {
	value *TransactionReceipt
	isSet bool
}

func (v NullableTransactionReceipt) Get() *TransactionReceipt {
	return v.value
}

func (v *NullableTransactionReceipt) Set(val *TransactionReceipt) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionReceipt) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionReceipt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionReceipt(val *TransactionReceipt) *NullableTransactionReceipt {
	return &NullableTransactionReceipt{value: val, isSet: true}
}

func (v NullableTransactionReceipt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionReceipt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
