/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CloudWalletTXToSignTx type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudWalletTXToSignTx{}

// CloudWalletTXToSignTx An Ethereum transaction.
type CloudWalletTXToSignTx struct {
	// Sender account nonce of the transaction
	Nonce *int64 `json:"nonce,omitempty"`
	// Gas price of the transaction
	GasPrice *string `json:"gasPrice,omitempty"`
	// Fee cap per gas of the transaction
	GasFeeCap *string `json:"gasFeeCap,omitempty"`
	// GasTipCap per gas of the transaction
	GasTipCap *string `json:"gasTipCap,omitempty"`
	// Gas limit of the transaction
	Gas int64 `json:"gas"`
	// An ethereum address.
	From string `json:"from" validate:"regexp=^0[xX][a-fA-F0-9]{40}$"`
	// An ethereum address.
	To NullableString `json:"to,omitempty" validate:"regexp=^0[xX][a-fA-F0-9]{40}$"`
	// Amount (in wei) to send with the transaction.
	Value string `json:"value"`
	// A hex string.
	Data string `json:"data" validate:"regexp=^(0x[0-9a-f]*|0X[0-9A-F]*)$"`
	// The keccak256 hash as a hex string of 256 bits.
	Hash *string `json:"hash,omitempty" validate:"regexp=^(0x[0-9a-f]{64}|0X[0-9A-F]{64})$"`
	// Transaction type
	Type int64 `json:"type"`
}

type _CloudWalletTXToSignTx CloudWalletTXToSignTx

// NewCloudWalletTXToSignTx instantiates a new CloudWalletTXToSignTx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudWalletTXToSignTx(gas int64, from string, value string, data string, type_ int64) *CloudWalletTXToSignTx {
	this := CloudWalletTXToSignTx{}
	this.Gas = gas
	this.From = from
	this.Value = value
	this.Data = data
	this.Type = type_
	return &this
}

// NewCloudWalletTXToSignTxWithDefaults instantiates a new CloudWalletTXToSignTx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudWalletTXToSignTxWithDefaults() *CloudWalletTXToSignTx {
	this := CloudWalletTXToSignTx{}
	return &this
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *CloudWalletTXToSignTx) GetNonce() int64 {
	if o == nil || IsNil(o.Nonce) {
		var ret int64
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetNonceOk() (*int64, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int64 and assigns it to the Nonce field.
func (o *CloudWalletTXToSignTx) SetNonce(v int64) {
	o.Nonce = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *CloudWalletTXToSignTx) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *CloudWalletTXToSignTx) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetGasFeeCap returns the GasFeeCap field value if set, zero value otherwise.
func (o *CloudWalletTXToSignTx) GetGasFeeCap() string {
	if o == nil || IsNil(o.GasFeeCap) {
		var ret string
		return ret
	}
	return *o.GasFeeCap
}

// GetGasFeeCapOk returns a tuple with the GasFeeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetGasFeeCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasFeeCap) {
		return nil, false
	}
	return o.GasFeeCap, true
}

// HasGasFeeCap returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasGasFeeCap() bool {
	if o != nil && !IsNil(o.GasFeeCap) {
		return true
	}

	return false
}

// SetGasFeeCap gets a reference to the given string and assigns it to the GasFeeCap field.
func (o *CloudWalletTXToSignTx) SetGasFeeCap(v string) {
	o.GasFeeCap = &v
}

// GetGasTipCap returns the GasTipCap field value if set, zero value otherwise.
func (o *CloudWalletTXToSignTx) GetGasTipCap() string {
	if o == nil || IsNil(o.GasTipCap) {
		var ret string
		return ret
	}
	return *o.GasTipCap
}

// GetGasTipCapOk returns a tuple with the GasTipCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetGasTipCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasTipCap) {
		return nil, false
	}
	return o.GasTipCap, true
}

// HasGasTipCap returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasGasTipCap() bool {
	if o != nil && !IsNil(o.GasTipCap) {
		return true
	}

	return false
}

// SetGasTipCap gets a reference to the given string and assigns it to the GasTipCap field.
func (o *CloudWalletTXToSignTx) SetGasTipCap(v string) {
	o.GasTipCap = &v
}

// GetGas returns the Gas field value
func (o *CloudWalletTXToSignTx) GetGas() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Gas
}

// GetGasOk returns a tuple with the Gas field value
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetGasOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gas, true
}

// SetGas sets field value
func (o *CloudWalletTXToSignTx) SetGas(v int64) {
	o.Gas = v
}

// GetFrom returns the From field value
func (o *CloudWalletTXToSignTx) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *CloudWalletTXToSignTx) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudWalletTXToSignTx) GetTo() string {
	if o == nil || IsNil(o.To.Get()) {
		var ret string
		return ret
	}
	return *o.To.Get()
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudWalletTXToSignTx) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To.Get(), o.To.IsSet()
}

// HasTo returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasTo() bool {
	if o != nil && o.To.IsSet() {
		return true
	}

	return false
}

// SetTo gets a reference to the given NullableString and assigns it to the To field.
func (o *CloudWalletTXToSignTx) SetTo(v string) {
	o.To.Set(&v)
}

// SetToNil sets the value for To to be an explicit nil
func (o *CloudWalletTXToSignTx) SetToNil() {
	o.To.Set(nil)
}

// UnsetTo ensures that no value is present for To, not even an explicit nil
func (o *CloudWalletTXToSignTx) UnsetTo() {
	o.To.Unset()
}

// GetValue returns the Value field value
func (o *CloudWalletTXToSignTx) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CloudWalletTXToSignTx) SetValue(v string) {
	o.Value = v
}

// GetData returns the Data field value
func (o *CloudWalletTXToSignTx) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CloudWalletTXToSignTx) SetData(v string) {
	o.Data = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *CloudWalletTXToSignTx) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *CloudWalletTXToSignTx) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *CloudWalletTXToSignTx) SetHash(v string) {
	o.Hash = &v
}

// GetType returns the Type field value
func (o *CloudWalletTXToSignTx) GetType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudWalletTXToSignTx) GetTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudWalletTXToSignTx) SetType(v int64) {
	o.Type = v
}

func (o CloudWalletTXToSignTx) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudWalletTXToSignTx) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if !IsNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if !IsNil(o.GasFeeCap) {
		toSerialize["gasFeeCap"] = o.GasFeeCap
	}
	if !IsNil(o.GasTipCap) {
		toSerialize["gasTipCap"] = o.GasTipCap
	}
	toSerialize["gas"] = o.Gas
	toSerialize["from"] = o.From
	if o.To.IsSet() {
		toSerialize["to"] = o.To.Get()
	}
	toSerialize["value"] = o.Value
	toSerialize["data"] = o.Data
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *CloudWalletTXToSignTx) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gas",
		"from",
		"value",
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudWalletTXToSignTx := _CloudWalletTXToSignTx{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudWalletTXToSignTx)

	if err != nil {
		return err
	}

	*o = CloudWalletTXToSignTx(varCloudWalletTXToSignTx)

	return err
}

type NullableCloudWalletTXToSignTx struct {
	value *CloudWalletTXToSignTx
	isSet bool
}

func (v NullableCloudWalletTXToSignTx) Get() *CloudWalletTXToSignTx {
	return v.value
}

func (v *NullableCloudWalletTXToSignTx) Set(val *CloudWalletTXToSignTx) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudWalletTXToSignTx) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudWalletTXToSignTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudWalletTXToSignTx(val *CloudWalletTXToSignTx) *NullableCloudWalletTXToSignTx {
	return &NullableCloudWalletTXToSignTx{value: val, isSet: true}
}

func (v NullableCloudWalletTXToSignTx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudWalletTXToSignTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
