/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// ChainName A blockchain chain name.
type ChainName string

// List of ChainName
const (
	ETHEREUM ChainName = "ethereum"
)

// All allowed values of ChainName enum
var AllowedChainNameEnumValues = []ChainName{
	"ethereum",
}

func (v *ChainName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChainName(value)
	for _, existing := range AllowedChainNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChainName", value)
}

// NewChainNameFromValue returns a pointer to a valid ChainName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainNameFromValue(v string) (*ChainName, error) {
	ev := ChainName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChainName: valid values are %v", v, AllowedChainNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChainName) IsValid() bool {
	for _, existing := range AllowedChainNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChainName value
func (v ChainName) Ptr() *ChainName {
	return &v
}

type NullableChainName struct {
	value *ChainName
	isSet bool
}

func (v NullableChainName) Get() *ChainName {
	return v.value
}

func (v *NullableChainName) Set(val *ChainName) {
	v.value = val
	v.isSet = true
}

func (v NullableChainName) IsSet() bool {
	return v.isSet
}

func (v *NullableChainName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainName(val *ChainName) *NullableChainName {
	return &NullableChainName{value: val, isSet: true}
}

func (v NullableChainName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
