/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AzureHardwareWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureHardwareWallet{}

// AzureHardwareWallet An HSM Wallet
type AzureHardwareWallet struct {
	Id             int64 `json:"id"`
	AzureAccountID int64 `json:"azureAccountID"`
	// The name given to the vault your key is stored in.
	VaultName string `json:"vaultName"`
	// The name of the key.
	KeyName string `json:"keyName"`
	// The version of the key.
	KeyVersion string `json:"keyVersion"`
	// An ethereum address.
	PublicAddress string `json:"publicAddress"`
}

type _AzureHardwareWallet AzureHardwareWallet

// NewAzureHardwareWallet instantiates a new AzureHardwareWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureHardwareWallet(id int64, azureAccountID int64, vaultName string, keyName string, keyVersion string, publicAddress string) *AzureHardwareWallet {
	this := AzureHardwareWallet{}
	this.Id = id
	this.AzureAccountID = azureAccountID
	this.VaultName = vaultName
	this.KeyName = keyName
	this.KeyVersion = keyVersion
	this.PublicAddress = publicAddress
	return &this
}

// NewAzureHardwareWalletWithDefaults instantiates a new AzureHardwareWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureHardwareWalletWithDefaults() *AzureHardwareWallet {
	this := AzureHardwareWallet{}
	return &this
}

// GetId returns the Id field value
func (o *AzureHardwareWallet) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AzureHardwareWallet) SetId(v int64) {
	o.Id = v
}

// GetAzureAccountID returns the AzureAccountID field value
func (o *AzureHardwareWallet) GetAzureAccountID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AzureAccountID
}

// GetAzureAccountIDOk returns a tuple with the AzureAccountID field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetAzureAccountIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureAccountID, true
}

// SetAzureAccountID sets field value
func (o *AzureHardwareWallet) SetAzureAccountID(v int64) {
	o.AzureAccountID = v
}

// GetVaultName returns the VaultName field value
func (o *AzureHardwareWallet) GetVaultName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultName
}

// GetVaultNameOk returns a tuple with the VaultName field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetVaultNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultName, true
}

// SetVaultName sets field value
func (o *AzureHardwareWallet) SetVaultName(v string) {
	o.VaultName = v
}

// GetKeyName returns the KeyName field value
func (o *AzureHardwareWallet) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *AzureHardwareWallet) SetKeyName(v string) {
	o.KeyName = v
}

// GetKeyVersion returns the KeyVersion field value
func (o *AzureHardwareWallet) GetKeyVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyVersion
}

// GetKeyVersionOk returns a tuple with the KeyVersion field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetKeyVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyVersion, true
}

// SetKeyVersion sets field value
func (o *AzureHardwareWallet) SetKeyVersion(v string) {
	o.KeyVersion = v
}

// GetPublicAddress returns the PublicAddress field value
func (o *AzureHardwareWallet) GetPublicAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicAddress
}

// GetPublicAddressOk returns a tuple with the PublicAddress field value
// and a boolean to check if the value has been set.
func (o *AzureHardwareWallet) GetPublicAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicAddress, true
}

// SetPublicAddress sets field value
func (o *AzureHardwareWallet) SetPublicAddress(v string) {
	o.PublicAddress = v
}

func (o AzureHardwareWallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureHardwareWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["azureAccountID"] = o.AzureAccountID
	toSerialize["vaultName"] = o.VaultName
	toSerialize["keyName"] = o.KeyName
	toSerialize["keyVersion"] = o.KeyVersion
	toSerialize["publicAddress"] = o.PublicAddress
	return toSerialize, nil
}

func (o *AzureHardwareWallet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"azureAccountID",
		"vaultName",
		"keyName",
		"keyVersion",
		"publicAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureHardwareWallet := _AzureHardwareWallet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureHardwareWallet)

	if err != nil {
		return err
	}

	*o = AzureHardwareWallet(varAzureHardwareWallet)

	return err
}

type NullableAzureHardwareWallet struct {
	value *AzureHardwareWallet
	isSet bool
}

func (v NullableAzureHardwareWallet) Get() *AzureHardwareWallet {
	return v.value
}

func (v *NullableAzureHardwareWallet) Set(val *AzureHardwareWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureHardwareWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureHardwareWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureHardwareWallet(val *AzureHardwareWallet) *NullableAzureHardwareWallet {
	return &NullableAzureHardwareWallet{value: val, isSet: true}
}

func (v NullableAzureHardwareWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureHardwareWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
