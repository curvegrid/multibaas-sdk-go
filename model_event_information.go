/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EventInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventInformation{}

// EventInformation The event information returned as part of an event.
type EventInformation struct {
	// The name of the event.
	Name string `json:"name"`
	// The event signature.
	Signature string `json:"signature"`
	// The list of input arguments for the event.
	Inputs []EventField `json:"inputs"`
	// The raw output from an event. Omitted when returned as part of a transaction receipt.
	RawFields *string             `json:"rawFields,omitempty"`
	Contract  ContractInformation `json:"contract"`
	// The event's index in the log.
	IndexInLog int64 `json:"indexInLog"`
}

// NewEventInformation instantiates a new EventInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInformation(name string, signature string, inputs []EventField, contract ContractInformation, indexInLog int64) *EventInformation {
	this := EventInformation{}
	this.Name = name
	this.Signature = signature
	this.Inputs = inputs
	this.Contract = contract
	this.IndexInLog = indexInLog
	return &this
}

// NewEventInformationWithDefaults instantiates a new EventInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInformationWithDefaults() *EventInformation {
	this := EventInformation{}
	return &this
}

// GetName returns the Name field value
func (o *EventInformation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventInformation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventInformation) SetName(v string) {
	o.Name = v
}

// GetSignature returns the Signature field value
func (o *EventInformation) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *EventInformation) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *EventInformation) SetSignature(v string) {
	o.Signature = v
}

// GetInputs returns the Inputs field value
func (o *EventInformation) GetInputs() []EventField {
	if o == nil {
		var ret []EventField
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *EventInformation) GetInputsOk() ([]EventField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *EventInformation) SetInputs(v []EventField) {
	o.Inputs = v
}

// GetRawFields returns the RawFields field value if set, zero value otherwise.
func (o *EventInformation) GetRawFields() string {
	if o == nil || IsNil(o.RawFields) {
		var ret string
		return ret
	}
	return *o.RawFields
}

// GetRawFieldsOk returns a tuple with the RawFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInformation) GetRawFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.RawFields) {
		return nil, false
	}
	return o.RawFields, true
}

// HasRawFields returns a boolean if a field has been set.
func (o *EventInformation) HasRawFields() bool {
	if o != nil && !IsNil(o.RawFields) {
		return true
	}

	return false
}

// SetRawFields gets a reference to the given string and assigns it to the RawFields field.
func (o *EventInformation) SetRawFields(v string) {
	o.RawFields = &v
}

// GetContract returns the Contract field value
func (o *EventInformation) GetContract() ContractInformation {
	if o == nil {
		var ret ContractInformation
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *EventInformation) GetContractOk() (*ContractInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *EventInformation) SetContract(v ContractInformation) {
	o.Contract = v
}

// GetIndexInLog returns the IndexInLog field value
func (o *EventInformation) GetIndexInLog() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IndexInLog
}

// GetIndexInLogOk returns a tuple with the IndexInLog field value
// and a boolean to check if the value has been set.
func (o *EventInformation) GetIndexInLogOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexInLog, true
}

// SetIndexInLog sets field value
func (o *EventInformation) SetIndexInLog(v int64) {
	o.IndexInLog = v
}

func (o EventInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["signature"] = o.Signature
	toSerialize["inputs"] = o.Inputs
	if !IsNil(o.RawFields) {
		toSerialize["rawFields"] = o.RawFields
	}
	toSerialize["contract"] = o.Contract
	toSerialize["indexInLog"] = o.IndexInLog
	return toSerialize, nil
}

type NullableEventInformation struct {
	value *EventInformation
	isSet bool
}

func (v NullableEventInformation) Get() *EventInformation {
	return v.value
}

func (v *NullableEventInformation) Set(val *EventInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInformation(val *EventInformation) *NullableEventInformation {
	return &NullableEventInformation{value: val, isSet: true}
}

func (v NullableEventInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
