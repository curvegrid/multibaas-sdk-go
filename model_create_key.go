/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateKey{}

// CreateKey Create Key request data.
type CreateKey struct {
	// The Application ID that will be accessing the Key Vault.
	ClientID string `json:"clientID"`
	// The name of the key.
	KeyName string `json:"keyName" validate:"regexp=^[a-zA-Z0-9-]{1,127}$"`
	// The name given to the vault your key is stored in.
	VaultName         string `json:"vaultName"`
	UseHardwareModule bool   `json:"useHardwareModule"`
}

type _CreateKey CreateKey

// NewCreateKey instantiates a new CreateKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateKey(clientID string, keyName string, vaultName string, useHardwareModule bool) *CreateKey {
	this := CreateKey{}
	this.ClientID = clientID
	this.KeyName = keyName
	this.VaultName = vaultName
	this.UseHardwareModule = useHardwareModule
	return &this
}

// NewCreateKeyWithDefaults instantiates a new CreateKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateKeyWithDefaults() *CreateKey {
	this := CreateKey{}
	return &this
}

// GetClientID returns the ClientID field value
func (o *CreateKey) GetClientID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientID
}

// GetClientIDOk returns a tuple with the ClientID field value
// and a boolean to check if the value has been set.
func (o *CreateKey) GetClientIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientID, true
}

// SetClientID sets field value
func (o *CreateKey) SetClientID(v string) {
	o.ClientID = v
}

// GetKeyName returns the KeyName field value
func (o *CreateKey) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *CreateKey) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *CreateKey) SetKeyName(v string) {
	o.KeyName = v
}

// GetVaultName returns the VaultName field value
func (o *CreateKey) GetVaultName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultName
}

// GetVaultNameOk returns a tuple with the VaultName field value
// and a boolean to check if the value has been set.
func (o *CreateKey) GetVaultNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultName, true
}

// SetVaultName sets field value
func (o *CreateKey) SetVaultName(v string) {
	o.VaultName = v
}

// GetUseHardwareModule returns the UseHardwareModule field value
func (o *CreateKey) GetUseHardwareModule() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseHardwareModule
}

// GetUseHardwareModuleOk returns a tuple with the UseHardwareModule field value
// and a boolean to check if the value has been set.
func (o *CreateKey) GetUseHardwareModuleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseHardwareModule, true
}

// SetUseHardwareModule sets field value
func (o *CreateKey) SetUseHardwareModule(v bool) {
	o.UseHardwareModule = v
}

func (o CreateKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientID"] = o.ClientID
	toSerialize["keyName"] = o.KeyName
	toSerialize["vaultName"] = o.VaultName
	toSerialize["useHardwareModule"] = o.UseHardwareModule
	return toSerialize, nil
}

func (o *CreateKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientID",
		"keyName",
		"vaultName",
		"useHardwareModule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateKey := _CreateKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateKey)

	if err != nil {
		return err
	}

	*o = CreateKey(varCreateKey)

	return err
}

type NullableCreateKey struct {
	value *CreateKey
	isSet bool
}

func (v NullableCreateKey) Get() *CreateKey {
	return v.value
}

func (v *NullableCreateKey) Set(val *CreateKey) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateKey) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateKey(val *CreateKey) *NullableCreateKey {
	return &NullableCreateKey{value: val, isSet: true}
}

func (v NullableCreateKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
