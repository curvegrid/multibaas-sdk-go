/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionData{}

// TransactionData The transaction data returned from a call to get transaction by hash.
type TransactionData struct {
	Data Transaction `json:"data"`
	// Whether the transaction has been included yet.
	IsPending bool `json:"isPending"`
	// An ethereum address.
	From string `json:"from" validate:"regexp=^0[xX][a-fA-F0-9]{40}$"`
	// The keccak256 hash as a hex string of 256 bits.
	BlockHash *string `json:"blockHash,omitempty" validate:"regexp=^(0x[0-9a-f]{64}|0X[0-9A-F]{64})$"`
	// The transaction block number.
	BlockNumber *string                    `json:"blockNumber,omitempty"`
	Contract    *ContractInformation       `json:"contract,omitempty"`
	Method      *ContractMethodInformation `json:"method,omitempty"`
}

type _TransactionData TransactionData

// NewTransactionData instantiates a new TransactionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionData(data Transaction, isPending bool, from string) *TransactionData {
	this := TransactionData{}
	this.Data = data
	this.IsPending = isPending
	this.From = from
	return &this
}

// NewTransactionDataWithDefaults instantiates a new TransactionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDataWithDefaults() *TransactionData {
	this := TransactionData{}
	return &this
}

// GetData returns the Data field value
func (o *TransactionData) GetData() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionData) GetDataOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionData) SetData(v Transaction) {
	o.Data = v
}

// GetIsPending returns the IsPending field value
func (o *TransactionData) GetIsPending() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPending
}

// GetIsPendingOk returns a tuple with the IsPending field value
// and a boolean to check if the value has been set.
func (o *TransactionData) GetIsPendingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPending, true
}

// SetIsPending sets field value
func (o *TransactionData) SetIsPending(v bool) {
	o.IsPending = v
}

// GetFrom returns the From field value
func (o *TransactionData) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *TransactionData) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *TransactionData) SetFrom(v string) {
	o.From = v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *TransactionData) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *TransactionData) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *TransactionData) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *TransactionData) GetBlockNumber() string {
	if o == nil || IsNil(o.BlockNumber) {
		var ret string
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetBlockNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *TransactionData) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given string and assigns it to the BlockNumber field.
func (o *TransactionData) SetBlockNumber(v string) {
	o.BlockNumber = &v
}

// GetContract returns the Contract field value if set, zero value otherwise.
func (o *TransactionData) GetContract() ContractInformation {
	if o == nil || IsNil(o.Contract) {
		var ret ContractInformation
		return ret
	}
	return *o.Contract
}

// GetContractOk returns a tuple with the Contract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetContractOk() (*ContractInformation, bool) {
	if o == nil || IsNil(o.Contract) {
		return nil, false
	}
	return o.Contract, true
}

// HasContract returns a boolean if a field has been set.
func (o *TransactionData) HasContract() bool {
	if o != nil && !IsNil(o.Contract) {
		return true
	}

	return false
}

// SetContract gets a reference to the given ContractInformation and assigns it to the Contract field.
func (o *TransactionData) SetContract(v ContractInformation) {
	o.Contract = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TransactionData) GetMethod() ContractMethodInformation {
	if o == nil || IsNil(o.Method) {
		var ret ContractMethodInformation
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionData) GetMethodOk() (*ContractMethodInformation, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TransactionData) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given ContractMethodInformation and assigns it to the Method field.
func (o *TransactionData) SetMethod(v ContractMethodInformation) {
	o.Method = &v
}

func (o TransactionData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["isPending"] = o.IsPending
	toSerialize["from"] = o.From
	if !IsNil(o.BlockHash) {
		toSerialize["blockHash"] = o.BlockHash
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["blockNumber"] = o.BlockNumber
	}
	if !IsNil(o.Contract) {
		toSerialize["contract"] = o.Contract
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	return toSerialize, nil
}

func (o *TransactionData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"isPending",
		"from",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionData := _TransactionData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionData)

	if err != nil {
		return err
	}

	*o = TransactionData(varTransactionData)

	return err
}

type NullableTransactionData struct {
	value *TransactionData
	isSet bool
}

func (v NullableTransactionData) Get() *TransactionData {
	return v.value
}

func (v *NullableTransactionData) Set(val *TransactionData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionData(val *TransactionData) *NullableTransactionData {
	return &NullableTransactionData{value: val, isSet: true}
}

func (v NullableTransactionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
