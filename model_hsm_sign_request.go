/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// HSMSignRequest - struct for HSMSignRequest
type HSMSignRequest struct {
	HSMSignRequestPersonalSign *HSMSignRequestPersonalSign
	HSMSignRequestTypedData    *HSMSignRequestTypedData
}

// HSMSignRequestPersonalSignAsHSMSignRequest is a convenience function that returns HSMSignRequestPersonalSign wrapped in HSMSignRequest
func HSMSignRequestPersonalSignAsHSMSignRequest(v *HSMSignRequestPersonalSign) HSMSignRequest {
	return HSMSignRequest{
		HSMSignRequestPersonalSign: v,
	}
}

// HSMSignRequestTypedDataAsHSMSignRequest is a convenience function that returns HSMSignRequestTypedData wrapped in HSMSignRequest
func HSMSignRequestTypedDataAsHSMSignRequest(v *HSMSignRequestTypedData) HSMSignRequest {
	return HSMSignRequest{
		HSMSignRequestTypedData: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HSMSignRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'eth_signTypedData_v4'
	if jsonDict["method"] == "eth_signTypedData_v4" {
		// try to unmarshal JSON data into HSMSignRequestTypedData
		err = json.Unmarshal(data, &dst.HSMSignRequestTypedData)
		if err == nil {
			return nil // data stored in dst.HSMSignRequestTypedData, return on the first match
		} else {
			dst.HSMSignRequestTypedData = nil
			return fmt.Errorf("failed to unmarshal HSMSignRequest as HSMSignRequestTypedData: %s", err.Error())
		}
	}

	// check if the discriminator value is 'personal_sign'
	if jsonDict["method"] == "personal_sign" {
		// try to unmarshal JSON data into HSMSignRequestPersonalSign
		err = json.Unmarshal(data, &dst.HSMSignRequestPersonalSign)
		if err == nil {
			return nil // data stored in dst.HSMSignRequestPersonalSign, return on the first match
		} else {
			dst.HSMSignRequestPersonalSign = nil
			return fmt.Errorf("failed to unmarshal HSMSignRequest as HSMSignRequestPersonalSign: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HSMSignRequestPersonalSign'
	if jsonDict["method"] == "HSMSignRequestPersonalSign" {
		// try to unmarshal JSON data into HSMSignRequestPersonalSign
		err = json.Unmarshal(data, &dst.HSMSignRequestPersonalSign)
		if err == nil {
			return nil // data stored in dst.HSMSignRequestPersonalSign, return on the first match
		} else {
			dst.HSMSignRequestPersonalSign = nil
			return fmt.Errorf("failed to unmarshal HSMSignRequest as HSMSignRequestPersonalSign: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HSMSignRequestTypedData'
	if jsonDict["method"] == "HSMSignRequestTypedData" {
		// try to unmarshal JSON data into HSMSignRequestTypedData
		err = json.Unmarshal(data, &dst.HSMSignRequestTypedData)
		if err == nil {
			return nil // data stored in dst.HSMSignRequestTypedData, return on the first match
		} else {
			dst.HSMSignRequestTypedData = nil
			return fmt.Errorf("failed to unmarshal HSMSignRequest as HSMSignRequestTypedData: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HSMSignRequest) MarshalJSON() ([]byte, error) {
	if src.HSMSignRequestPersonalSign != nil {
		return json.Marshal(&src.HSMSignRequestPersonalSign)
	}

	if src.HSMSignRequestTypedData != nil {
		return json.Marshal(&src.HSMSignRequestTypedData)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HSMSignRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HSMSignRequestPersonalSign != nil {
		return obj.HSMSignRequestPersonalSign
	}

	if obj.HSMSignRequestTypedData != nil {
		return obj.HSMSignRequestTypedData
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HSMSignRequest) GetActualInstanceValue() interface{} {
	if obj.HSMSignRequestPersonalSign != nil {
		return *obj.HSMSignRequestPersonalSign
	}

	if obj.HSMSignRequestTypedData != nil {
		return *obj.HSMSignRequestTypedData
	}

	// all schemas are nil
	return nil
}

type NullableHSMSignRequest struct {
	value *HSMSignRequest
	isSet bool
}

func (v NullableHSMSignRequest) Get() *HSMSignRequest {
	return v.value
}

func (v *NullableHSMSignRequest) Set(val *HSMSignRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHSMSignRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHSMSignRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHSMSignRequest(val *HSMSignRequest) *NullableHSMSignRequest {
	return &NullableHSMSignRequest{value: val, isSet: true}
}

func (v NullableHSMSignRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHSMSignRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
