/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the GasParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GasParams{}

// GasParams Specify custom gas parameters
type GasParams struct {
	// Gas price to use for the cancel/resubmit.
	GasPrice *string `json:"gasPrice,omitempty"`
	// Gas fee cap to use for the EIP-1559 cancel/resubmit.
	GasFeeCap *string `json:"gasFeeCap,omitempty"`
	// Gas priority fee cap to use for the EIP-1559 cancel/resubmit.
	GasTipCap *string `json:"gasTipCap,omitempty"`
	// Gas limit to set for the cancel/resubmit.
	Gas *int64 `json:"gas,omitempty"`
}

// NewGasParams instantiates a new GasParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGasParams() *GasParams {
	this := GasParams{}
	return &this
}

// NewGasParamsWithDefaults instantiates a new GasParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGasParamsWithDefaults() *GasParams {
	this := GasParams{}
	return &this
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *GasParams) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasParams) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *GasParams) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *GasParams) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetGasFeeCap returns the GasFeeCap field value if set, zero value otherwise.
func (o *GasParams) GetGasFeeCap() string {
	if o == nil || IsNil(o.GasFeeCap) {
		var ret string
		return ret
	}
	return *o.GasFeeCap
}

// GetGasFeeCapOk returns a tuple with the GasFeeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasParams) GetGasFeeCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasFeeCap) {
		return nil, false
	}
	return o.GasFeeCap, true
}

// HasGasFeeCap returns a boolean if a field has been set.
func (o *GasParams) HasGasFeeCap() bool {
	if o != nil && !IsNil(o.GasFeeCap) {
		return true
	}

	return false
}

// SetGasFeeCap gets a reference to the given string and assigns it to the GasFeeCap field.
func (o *GasParams) SetGasFeeCap(v string) {
	o.GasFeeCap = &v
}

// GetGasTipCap returns the GasTipCap field value if set, zero value otherwise.
func (o *GasParams) GetGasTipCap() string {
	if o == nil || IsNil(o.GasTipCap) {
		var ret string
		return ret
	}
	return *o.GasTipCap
}

// GetGasTipCapOk returns a tuple with the GasTipCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasParams) GetGasTipCapOk() (*string, bool) {
	if o == nil || IsNil(o.GasTipCap) {
		return nil, false
	}
	return o.GasTipCap, true
}

// HasGasTipCap returns a boolean if a field has been set.
func (o *GasParams) HasGasTipCap() bool {
	if o != nil && !IsNil(o.GasTipCap) {
		return true
	}

	return false
}

// SetGasTipCap gets a reference to the given string and assigns it to the GasTipCap field.
func (o *GasParams) SetGasTipCap(v string) {
	o.GasTipCap = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *GasParams) GetGas() int64 {
	if o == nil || IsNil(o.Gas) {
		var ret int64
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasParams) GetGasOk() (*int64, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *GasParams) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given int64 and assigns it to the Gas field.
func (o *GasParams) SetGas(v int64) {
	o.Gas = &v
}

func (o GasParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if !IsNil(o.GasFeeCap) {
		toSerialize["gasFeeCap"] = o.GasFeeCap
	}
	if !IsNil(o.GasTipCap) {
		toSerialize["gasTipCap"] = o.GasTipCap
	}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	return toSerialize, nil
}

type NullableGasParams struct {
	value *GasParams
	isSet bool
}

func (v NullableGasParams) Get() *GasParams {
	return v.value
}

func (v *NullableGasParams) Set(val *GasParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGasParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGasParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGasParams(val *GasParams) *NullableGasParams {
	return &NullableGasParams{value: val, isSet: true}
}

func (v NullableGasParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGasParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
