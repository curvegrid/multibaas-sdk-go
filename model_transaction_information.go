/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionInformation{}

// TransactionInformation The transaction information returned as part of an event.
type TransactionInformation struct {
	// An ethereum address.
	From string `json:"from"`
	// A hex string.
	TxData string `json:"txData"`
	// The keccak256 hash as a hex string of 256 bits.
	TxHash string `json:"txHash"`
	// The location of the transaction in the block.
	TxIndexInBlock int64 `json:"txIndexInBlock"`
	// The keccak256 hash as a hex string of 256 bits.
	BlockHash string `json:"blockHash"`
	// The transaction block number.
	BlockNumber int64                     `json:"blockNumber"`
	Contract    ContractInformation       `json:"contract"`
	Method      ContractMethodInformation `json:"method"`
}

type _TransactionInformation TransactionInformation

// NewTransactionInformation instantiates a new TransactionInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionInformation(from string, txData string, txHash string, txIndexInBlock int64, blockHash string, blockNumber int64, contract ContractInformation, method ContractMethodInformation) *TransactionInformation {
	this := TransactionInformation{}
	this.From = from
	this.TxData = txData
	this.TxHash = txHash
	this.TxIndexInBlock = txIndexInBlock
	this.BlockHash = blockHash
	this.BlockNumber = blockNumber
	this.Contract = contract
	this.Method = method
	return &this
}

// NewTransactionInformationWithDefaults instantiates a new TransactionInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionInformationWithDefaults() *TransactionInformation {
	this := TransactionInformation{}
	return &this
}

// GetFrom returns the From field value
func (o *TransactionInformation) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *TransactionInformation) SetFrom(v string) {
	o.From = v
}

// GetTxData returns the TxData field value
func (o *TransactionInformation) GetTxData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxData
}

// GetTxDataOk returns a tuple with the TxData field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetTxDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxData, true
}

// SetTxData sets field value
func (o *TransactionInformation) SetTxData(v string) {
	o.TxData = v
}

// GetTxHash returns the TxHash field value
func (o *TransactionInformation) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *TransactionInformation) SetTxHash(v string) {
	o.TxHash = v
}

// GetTxIndexInBlock returns the TxIndexInBlock field value
func (o *TransactionInformation) GetTxIndexInBlock() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TxIndexInBlock
}

// GetTxIndexInBlockOk returns a tuple with the TxIndexInBlock field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetTxIndexInBlockOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxIndexInBlock, true
}

// SetTxIndexInBlock sets field value
func (o *TransactionInformation) SetTxIndexInBlock(v int64) {
	o.TxIndexInBlock = v
}

// GetBlockHash returns the BlockHash field value
func (o *TransactionInformation) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *TransactionInformation) SetBlockHash(v string) {
	o.BlockHash = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *TransactionInformation) GetBlockNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetBlockNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *TransactionInformation) SetBlockNumber(v int64) {
	o.BlockNumber = v
}

// GetContract returns the Contract field value
func (o *TransactionInformation) GetContract() ContractInformation {
	if o == nil {
		var ret ContractInformation
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetContractOk() (*ContractInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *TransactionInformation) SetContract(v ContractInformation) {
	o.Contract = v
}

// GetMethod returns the Method field value
func (o *TransactionInformation) GetMethod() ContractMethodInformation {
	if o == nil {
		var ret ContractMethodInformation
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *TransactionInformation) GetMethodOk() (*ContractMethodInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *TransactionInformation) SetMethod(v ContractMethodInformation) {
	o.Method = v
}

func (o TransactionInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["txData"] = o.TxData
	toSerialize["txHash"] = o.TxHash
	toSerialize["txIndexInBlock"] = o.TxIndexInBlock
	toSerialize["blockHash"] = o.BlockHash
	toSerialize["blockNumber"] = o.BlockNumber
	toSerialize["contract"] = o.Contract
	toSerialize["method"] = o.Method
	return toSerialize, nil
}

func (o *TransactionInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"txData",
		"txHash",
		"txIndexInBlock",
		"blockHash",
		"blockNumber",
		"contract",
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionInformation := _TransactionInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionInformation)

	if err != nil {
		return err
	}

	*o = TransactionInformation(varTransactionInformation)

	return err
}

type NullableTransactionInformation struct {
	value *TransactionInformation
	isSet bool
}

func (v NullableTransactionInformation) Get() *TransactionInformation {
	return v.value
}

func (v *NullableTransactionInformation) Set(val *TransactionInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionInformation(val *TransactionInformation) *NullableTransactionInformation {
	return &NullableTransactionInformation{value: val, isSet: true}
}

func (v NullableTransactionInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
