/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the SignerWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignerWallet{}

// SignerWallet A signer wallet.
type SignerWallet struct {
	// The type of the signer.
	Type *string `json:"type,omitempty"`
	// An ethereum address.
	Wallet *string `json:"wallet,omitempty"`
	// An ethereum address.
	Signer *string `json:"signer,omitempty"`
	// The label of the signer.
	Label *string `json:"label,omitempty"`
}

// NewSignerWallet instantiates a new SignerWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignerWallet() *SignerWallet {
	this := SignerWallet{}
	return &this
}

// NewSignerWalletWithDefaults instantiates a new SignerWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignerWalletWithDefaults() *SignerWallet {
	this := SignerWallet{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SignerWallet) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerWallet) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SignerWallet) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SignerWallet) SetType(v string) {
	o.Type = &v
}

// GetWallet returns the Wallet field value if set, zero value otherwise.
func (o *SignerWallet) GetWallet() string {
	if o == nil || IsNil(o.Wallet) {
		var ret string
		return ret
	}
	return *o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerWallet) GetWalletOk() (*string, bool) {
	if o == nil || IsNil(o.Wallet) {
		return nil, false
	}
	return o.Wallet, true
}

// HasWallet returns a boolean if a field has been set.
func (o *SignerWallet) HasWallet() bool {
	if o != nil && !IsNil(o.Wallet) {
		return true
	}

	return false
}

// SetWallet gets a reference to the given string and assigns it to the Wallet field.
func (o *SignerWallet) SetWallet(v string) {
	o.Wallet = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *SignerWallet) GetSigner() string {
	if o == nil || IsNil(o.Signer) {
		var ret string
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerWallet) GetSignerOk() (*string, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *SignerWallet) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given string and assigns it to the Signer field.
func (o *SignerWallet) SetSigner(v string) {
	o.Signer = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SignerWallet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerWallet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SignerWallet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SignerWallet) SetLabel(v string) {
	o.Label = &v
}

func (o SignerWallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignerWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Wallet) {
		toSerialize["wallet"] = o.Wallet
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableSignerWallet struct {
	value *SignerWallet
	isSet bool
}

func (v NullableSignerWallet) Get() *SignerWallet {
	return v.value
}

func (v *NullableSignerWallet) Set(val *SignerWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableSignerWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableSignerWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignerWallet(val *SignerWallet) *NullableSignerWallet {
	return &NullableSignerWallet{value: val, isSet: true}
}

func (v NullableSignerWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignerWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
