/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the BaseTransactionToSign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransactionToSign{}

// BaseTransactionToSign A transaction to be signed.
type BaseTransactionToSign struct {
	Tx BaseTransactionToSignTx `json:"tx"`
}

// NewBaseTransactionToSign instantiates a new BaseTransactionToSign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransactionToSign(tx BaseTransactionToSignTx) *BaseTransactionToSign {
	this := BaseTransactionToSign{}
	this.Tx = tx
	return &this
}

// NewBaseTransactionToSignWithDefaults instantiates a new BaseTransactionToSign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransactionToSignWithDefaults() *BaseTransactionToSign {
	this := BaseTransactionToSign{}
	return &this
}

// GetTx returns the Tx field value
func (o *BaseTransactionToSign) GetTx() BaseTransactionToSignTx {
	if o == nil {
		var ret BaseTransactionToSignTx
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *BaseTransactionToSign) GetTxOk() (*BaseTransactionToSignTx, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *BaseTransactionToSign) SetTx(v BaseTransactionToSignTx) {
	o.Tx = v
}

func (o BaseTransactionToSign) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransactionToSign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tx"] = o.Tx
	return toSerialize, nil
}

type NullableBaseTransactionToSign struct {
	value *BaseTransactionToSign
	isSet bool
}

func (v NullableBaseTransactionToSign) Get() *BaseTransactionToSign {
	return v.value
}

func (v *NullableBaseTransactionToSign) Set(val *BaseTransactionToSign) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransactionToSign) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransactionToSign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransactionToSign(val *BaseTransactionToSign) *NullableBaseTransactionToSign {
	return &NullableBaseTransactionToSign{value: val, isSet: true}
}

func (v NullableBaseTransactionToSign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransactionToSign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
