/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the SetNonceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetNonceRequest{}

// SetNonceRequest Request body representing a set local nonce request.
type SetNonceRequest struct {
	// If nonce is specified the provided value is set, otherwise the value is read from the blockchain.
	Nonce *int64 `json:"nonce,omitempty"`
}

// NewSetNonceRequest instantiates a new SetNonceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetNonceRequest() *SetNonceRequest {
	this := SetNonceRequest{}
	return &this
}

// NewSetNonceRequestWithDefaults instantiates a new SetNonceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetNonceRequestWithDefaults() *SetNonceRequest {
	this := SetNonceRequest{}
	return &this
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *SetNonceRequest) GetNonce() int64 {
	if o == nil || IsNil(o.Nonce) {
		var ret int64
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetNonceRequest) GetNonceOk() (*int64, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *SetNonceRequest) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int64 and assigns it to the Nonce field.
func (o *SetNonceRequest) SetNonce(v int64) {
	o.Nonce = &v
}

func (o SetNonceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetNonceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	return toSerialize, nil
}

type NullableSetNonceRequest struct {
	value *SetNonceRequest
	isSet bool
}

func (v NullableSetNonceRequest) Get() *SetNonceRequest {
	return v.value
}

func (v *NullableSetNonceRequest) Set(val *SetNonceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetNonceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetNonceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetNonceRequest(val *SetNonceRequest) *NullableSetNonceRequest {
	return &NullableSetNonceRequest{value: val, isSet: true}
}

func (v NullableSetNonceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetNonceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
