/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the SignData200ResponseAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignData200ResponseAllOf{}

// SignData200ResponseAllOf struct for SignData200ResponseAllOf
type SignData200ResponseAllOf struct {
	Result HSMSignResponse `json:"result"`
}

// NewSignData200ResponseAllOf instantiates a new SignData200ResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignData200ResponseAllOf(result HSMSignResponse) *SignData200ResponseAllOf {
	this := SignData200ResponseAllOf{}
	this.Result = result
	return &this
}

// NewSignData200ResponseAllOfWithDefaults instantiates a new SignData200ResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignData200ResponseAllOfWithDefaults() *SignData200ResponseAllOf {
	this := SignData200ResponseAllOf{}
	return &this
}

// GetResult returns the Result field value
func (o *SignData200ResponseAllOf) GetResult() HSMSignResponse {
	if o == nil {
		var ret HSMSignResponse
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *SignData200ResponseAllOf) GetResultOk() (*HSMSignResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *SignData200ResponseAllOf) SetResult(v HSMSignResponse) {
	o.Result = v
}

func (o SignData200ResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignData200ResponseAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

type NullableSignData200ResponseAllOf struct {
	value *SignData200ResponseAllOf
	isSet bool
}

func (v NullableSignData200ResponseAllOf) Get() *SignData200ResponseAllOf {
	return v.value
}

func (v *NullableSignData200ResponseAllOf) Set(val *SignData200ResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSignData200ResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSignData200ResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignData200ResponseAllOf(val *SignData200ResponseAllOf) *NullableSignData200ResponseAllOf {
	return &NullableSignData200ResponseAllOf{value: val, isSet: true}
}

func (v NullableSignData200ResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignData200ResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
