/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EventField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventField{}

// EventField Holds a field in the event's data.
type EventField struct {
	// The input name.
	Name  string      `json:"name"`
	Value interface{} `json:"value"`
	// Has the value been hashed into a keccak256 string?
	Hashed bool `json:"hashed"`
	// The type of the argument.
	Type string `json:"type"`
}

type _EventField EventField

// NewEventField instantiates a new EventField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventField(name string, value interface{}, hashed bool, type_ string) *EventField {
	this := EventField{}
	this.Name = name
	this.Value = value
	this.Hashed = hashed
	this.Type = type_
	return &this
}

// NewEventFieldWithDefaults instantiates a new EventField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventFieldWithDefaults() *EventField {
	this := EventField{}
	return &this
}

// GetName returns the Name field value
func (o *EventField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventField) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *EventField) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventField) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EventField) SetValue(v interface{}) {
	o.Value = v
}

// GetHashed returns the Hashed field value
func (o *EventField) GetHashed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hashed
}

// GetHashedOk returns a tuple with the Hashed field value
// and a boolean to check if the value has been set.
func (o *EventField) GetHashedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hashed, true
}

// SetHashed sets field value
func (o *EventField) SetHashed(v bool) {
	o.Hashed = v
}

// GetType returns the Type field value
func (o *EventField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventField) SetType(v string) {
	o.Type = v
}

func (o EventField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	toSerialize["hashed"] = o.Hashed
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableEventField struct {
	value *EventField
	isSet bool
}

func (v NullableEventField) Get() *EventField {
	return v.value
}

func (v *NullableEventField) Set(val *EventField) {
	v.value = val
	v.isSet = true
}

func (v NullableEventField) IsSet() bool {
	return v.isSet
}

func (v *NullableEventField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventField(val *EventField) *NullableEventField {
	return &NullableEventField{value: val, isSet: true}
}

func (v NullableEventField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
