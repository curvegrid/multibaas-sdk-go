/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
)

// checks if the EventQueryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventQueryFilter{}

// EventQueryFilter A event query filter.
type EventQueryFilter struct {
	// The rule type, can be omitted if this is the last filter to be applied.
	Rule      *string    `json:"rule,omitempty"`
	FieldType *FieldType `json:"fieldType,omitempty"`
	// The field's index, can be used in place of `name`.
	InputIndex NullableInt64 `json:"inputIndex,omitempty"`
	// The operator on the filter.
	Operator *string `json:"operator,omitempty"`
	// The value to be compared with.
	Value *string `json:"value,omitempty"`
	// Other filters to be applied in succession with the rule specified.
	Children []EventQueryFilter `json:"children,omitempty"`
}

// NewEventQueryFilter instantiates a new EventQueryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventQueryFilter() *EventQueryFilter {
	this := EventQueryFilter{}
	return &this
}

// NewEventQueryFilterWithDefaults instantiates a new EventQueryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventQueryFilterWithDefaults() *EventQueryFilter {
	this := EventQueryFilter{}
	return &this
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *EventQueryFilter) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryFilter) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *EventQueryFilter) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *EventQueryFilter) SetRule(v string) {
	o.Rule = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *EventQueryFilter) GetFieldType() FieldType {
	if o == nil || IsNil(o.FieldType) {
		var ret FieldType
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryFilter) GetFieldTypeOk() (*FieldType, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *EventQueryFilter) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given FieldType and assigns it to the FieldType field.
func (o *EventQueryFilter) SetFieldType(v FieldType) {
	o.FieldType = &v
}

// GetInputIndex returns the InputIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventQueryFilter) GetInputIndex() int64 {
	if o == nil || IsNil(o.InputIndex.Get()) {
		var ret int64
		return ret
	}
	return *o.InputIndex.Get()
}

// GetInputIndexOk returns a tuple with the InputIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventQueryFilter) GetInputIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InputIndex.Get(), o.InputIndex.IsSet()
}

// HasInputIndex returns a boolean if a field has been set.
func (o *EventQueryFilter) HasInputIndex() bool {
	if o != nil && o.InputIndex.IsSet() {
		return true
	}

	return false
}

// SetInputIndex gets a reference to the given NullableInt64 and assigns it to the InputIndex field.
func (o *EventQueryFilter) SetInputIndex(v int64) {
	o.InputIndex.Set(&v)
}

// SetInputIndexNil sets the value for InputIndex to be an explicit nil
func (o *EventQueryFilter) SetInputIndexNil() {
	o.InputIndex.Set(nil)
}

// UnsetInputIndex ensures that no value is present for InputIndex, not even an explicit nil
func (o *EventQueryFilter) UnsetInputIndex() {
	o.InputIndex.Unset()
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *EventQueryFilter) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryFilter) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *EventQueryFilter) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *EventQueryFilter) SetOperator(v string) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EventQueryFilter) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryFilter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EventQueryFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EventQueryFilter) SetValue(v string) {
	o.Value = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *EventQueryFilter) GetChildren() []EventQueryFilter {
	if o == nil || IsNil(o.Children) {
		var ret []EventQueryFilter
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventQueryFilter) GetChildrenOk() ([]EventQueryFilter, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *EventQueryFilter) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []EventQueryFilter and assigns it to the Children field.
func (o *EventQueryFilter) SetChildren(v []EventQueryFilter) {
	o.Children = v
}

func (o EventQueryFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventQueryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if o.InputIndex.IsSet() {
		toSerialize["inputIndex"] = o.InputIndex.Get()
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableEventQueryFilter struct {
	value *EventQueryFilter
	isSet bool
}

func (v NullableEventQueryFilter) Get() *EventQueryFilter {
	return v.value
}

func (v *NullableEventQueryFilter) Set(val *EventQueryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEventQueryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEventQueryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventQueryFilter(val *EventQueryFilter) *NullableEventQueryFilter {
	return &NullableEventQueryFilter{value: val, isSet: true}
}

func (v NullableEventQueryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventQueryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
