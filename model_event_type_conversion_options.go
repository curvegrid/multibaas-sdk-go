/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventTypeConversionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTypeConversionOptions{}

// EventTypeConversionOptions Type conversion options for each of the inputs of an event.
type EventTypeConversionOptions struct {
	// List of event's input parameters.
	Inputs []TypeConversionOptions `json:"inputs"`
}

type _EventTypeConversionOptions EventTypeConversionOptions

// NewEventTypeConversionOptions instantiates a new EventTypeConversionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeConversionOptions(inputs []TypeConversionOptions) *EventTypeConversionOptions {
	this := EventTypeConversionOptions{}
	this.Inputs = inputs
	return &this
}

// NewEventTypeConversionOptionsWithDefaults instantiates a new EventTypeConversionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeConversionOptionsWithDefaults() *EventTypeConversionOptions {
	this := EventTypeConversionOptions{}
	return &this
}

// GetInputs returns the Inputs field value
func (o *EventTypeConversionOptions) GetInputs() []TypeConversionOptions {
	if o == nil {
		var ret []TypeConversionOptions
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *EventTypeConversionOptions) GetInputsOk() ([]TypeConversionOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *EventTypeConversionOptions) SetInputs(v []TypeConversionOptions) {
	o.Inputs = v
}

func (o EventTypeConversionOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTypeConversionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputs"] = o.Inputs
	return toSerialize, nil
}

func (o *EventTypeConversionOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventTypeConversionOptions := _EventTypeConversionOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventTypeConversionOptions)

	if err != nil {
		return err
	}

	*o = EventTypeConversionOptions(varEventTypeConversionOptions)

	return err
}

type NullableEventTypeConversionOptions struct {
	value *EventTypeConversionOptions
	isSet bool
}

func (v NullableEventTypeConversionOptions) Get() *EventTypeConversionOptions {
	return v.value
}

func (v *NullableEventTypeConversionOptions) Set(val *EventTypeConversionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeConversionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeConversionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeConversionOptions(val *EventTypeConversionOptions) *NullableEventTypeConversionOptions {
	return &NullableEventTypeConversionOptions{value: val, isSet: true}
}

func (v NullableEventTypeConversionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeConversionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
