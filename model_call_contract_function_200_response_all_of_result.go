/*
MultiBaas API

MultiBaas's REST APIv0.

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package multibaas

import (
	"encoding/json"
	"fmt"
)

// CallContractFunction200ResponseAllOfResult - struct for CallContractFunction200ResponseAllOfResult
type CallContractFunction200ResponseAllOfResult struct {
	MethodCallPreviewResponse *MethodCallPreviewResponse
	MethodCallResponse        *MethodCallResponse
	TransactionToSignResponse *TransactionToSignResponse
}

// MethodCallPreviewResponseAsCallContractFunction200ResponseAllOfResult is a convenience function that returns MethodCallPreviewResponse wrapped in CallContractFunction200ResponseAllOfResult
func MethodCallPreviewResponseAsCallContractFunction200ResponseAllOfResult(v *MethodCallPreviewResponse) CallContractFunction200ResponseAllOfResult {
	return CallContractFunction200ResponseAllOfResult{
		MethodCallPreviewResponse: v,
	}
}

// MethodCallResponseAsCallContractFunction200ResponseAllOfResult is a convenience function that returns MethodCallResponse wrapped in CallContractFunction200ResponseAllOfResult
func MethodCallResponseAsCallContractFunction200ResponseAllOfResult(v *MethodCallResponse) CallContractFunction200ResponseAllOfResult {
	return CallContractFunction200ResponseAllOfResult{
		MethodCallResponse: v,
	}
}

// TransactionToSignResponseAsCallContractFunction200ResponseAllOfResult is a convenience function that returns TransactionToSignResponse wrapped in CallContractFunction200ResponseAllOfResult
func TransactionToSignResponseAsCallContractFunction200ResponseAllOfResult(v *TransactionToSignResponse) CallContractFunction200ResponseAllOfResult {
	return CallContractFunction200ResponseAllOfResult{
		TransactionToSignResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CallContractFunction200ResponseAllOfResult) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'MethodCallPreviewResponse'
	if jsonDict["kind"] == "MethodCallPreviewResponse" {
		// try to unmarshal JSON data into MethodCallPreviewResponse
		err = json.Unmarshal(data, &dst.MethodCallPreviewResponse)
		if err == nil {
			return nil // data stored in dst.MethodCallPreviewResponse, return on the first match
		} else {
			dst.MethodCallPreviewResponse = nil
			return fmt.Errorf("failed to unmarshal CallContractFunction200ResponseAllOfResult as MethodCallPreviewResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MethodCallResponse'
	if jsonDict["kind"] == "MethodCallResponse" {
		// try to unmarshal JSON data into MethodCallResponse
		err = json.Unmarshal(data, &dst.MethodCallResponse)
		if err == nil {
			return nil // data stored in dst.MethodCallResponse, return on the first match
		} else {
			dst.MethodCallResponse = nil
			return fmt.Errorf("failed to unmarshal CallContractFunction200ResponseAllOfResult as MethodCallResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TransactionToSignResponse'
	if jsonDict["kind"] == "TransactionToSignResponse" {
		// try to unmarshal JSON data into TransactionToSignResponse
		err = json.Unmarshal(data, &dst.TransactionToSignResponse)
		if err == nil {
			return nil // data stored in dst.TransactionToSignResponse, return on the first match
		} else {
			dst.TransactionToSignResponse = nil
			return fmt.Errorf("failed to unmarshal CallContractFunction200ResponseAllOfResult as TransactionToSignResponse: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CallContractFunction200ResponseAllOfResult) MarshalJSON() ([]byte, error) {
	if src.MethodCallPreviewResponse != nil {
		return json.Marshal(&src.MethodCallPreviewResponse)
	}

	if src.MethodCallResponse != nil {
		return json.Marshal(&src.MethodCallResponse)
	}

	if src.TransactionToSignResponse != nil {
		return json.Marshal(&src.TransactionToSignResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CallContractFunction200ResponseAllOfResult) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MethodCallPreviewResponse != nil {
		return obj.MethodCallPreviewResponse
	}

	if obj.MethodCallResponse != nil {
		return obj.MethodCallResponse
	}

	if obj.TransactionToSignResponse != nil {
		return obj.TransactionToSignResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CallContractFunction200ResponseAllOfResult) GetActualInstanceValue() interface{} {
	if obj.MethodCallPreviewResponse != nil {
		return *obj.MethodCallPreviewResponse
	}

	if obj.MethodCallResponse != nil {
		return *obj.MethodCallResponse
	}

	if obj.TransactionToSignResponse != nil {
		return *obj.TransactionToSignResponse
	}

	// all schemas are nil
	return nil
}

type NullableCallContractFunction200ResponseAllOfResult struct {
	value *CallContractFunction200ResponseAllOfResult
	isSet bool
}

func (v NullableCallContractFunction200ResponseAllOfResult) Get() *CallContractFunction200ResponseAllOfResult {
	return v.value
}

func (v *NullableCallContractFunction200ResponseAllOfResult) Set(val *CallContractFunction200ResponseAllOfResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCallContractFunction200ResponseAllOfResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCallContractFunction200ResponseAllOfResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallContractFunction200ResponseAllOfResult(val *CallContractFunction200ResponseAllOfResult) *NullableCallContractFunction200ResponseAllOfResult {
	return &NullableCallContractFunction200ResponseAllOfResult{value: val, isSet: true}
}

func (v NullableCallContractFunction200ResponseAllOfResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallContractFunction200ResponseAllOfResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
